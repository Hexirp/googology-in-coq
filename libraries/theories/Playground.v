(** Playground モジュールは、まだ単独のモジュールに分割していないコードを置く場所です。 *)

Require Googology_In_Coq.Base.

Import Googology_In_Coq.Base.

(** ペアノ式の自然数を定義します。 *)

Inductive 数_自然_ペアノ@{ i | } : Type@{ i }
    :=
        零_数_自然_ペアノ : 数_自然_ペアノ
        |
        次ぐ_数_自然_ペアノ : 数_自然_ペアノ -> 数_自然_ペアノ
.

(** ペアノ式の自然数の 1 を定義します。 *)

Definition 一_数_自然_ペアノ@{ i | } : 数_自然_ペアノ@{ i } := 次ぐ_数_自然_ペアノ 零_数_自然_ペアノ.

(** ペアノ式の自然数の 2 を定義します。 *)

Definition 二_数_自然_ペアノ@{ i | } : 数_自然_ペアノ@{ i } := 次ぐ_数_自然_ペアノ 一_数_自然_ペアノ.

(** ペアノ式の自然数の 3 を定義します。 *)

Definition 三_数_自然_ペアノ@{ i | } : 数_自然_ペアノ@{ i } := 次ぐ_数_自然_ペアノ 二_数_自然_ペアノ.

(** ペアノ式の自然数の 4 を定義します。 *)

Definition 四_数_自然_ペアノ@{ i | } : 数_自然_ペアノ@{ i } := 次ぐ_数_自然_ペアノ 三_数_自然_ペアノ.

(** ペアノ式の自然数の 5 を定義します。 *)

Definition 五_数_自然_ペアノ@{ i | } : 数_自然_ペアノ@{ i } := 次ぐ_数_自然_ペアノ 四_数_自然_ペアノ.

(** ペアノ式の自然数の 6 を定義します。 *)

Definition 六_数_自然_ペアノ@{ i | } : 数_自然_ペアノ@{ i } := 次ぐ_数_自然_ペアノ 五_数_自然_ペアノ.

(** ペアノ式の自然数の 7 を定義します。 *)

Definition 七_数_自然_ペアノ@{ i | } : 数_自然_ペアノ@{ i } := 次ぐ_数_自然_ペアノ 六_数_自然_ペアノ.

(** ペアノ式の自然数の 8 を定義します。 *)

Definition 八_数_自然_ペアノ@{ i | } : 数_自然_ペアノ@{ i } := 次ぐ_数_自然_ペアノ 七_数_自然_ペアノ.

(** ペアノ式の自然数の 9 を定義します。 *)

Definition 九_数_自然_ペアノ@{ i | } : 数_自然_ペアノ@{ i } := 次ぐ_数_自然_ペアノ 八_数_自然_ペアノ.

(** ペアノ式の自然数の 10 を定義します。 *)

Definition 十_数_自然_ペアノ@{ i | } : 数_自然_ペアノ@{ i } := 次ぐ_数_自然_ペアノ 九_数_自然_ペアノ.

(** ペアノ式の自然数の加算を定義します。 *)

Definition 足す_数_自然_ペアノ@{ i | }
    : 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i }
    :=
        fix a ( x : 数_自然_ペアノ@{ i } ) ( y : 数_自然_ペアノ@{ i } ) { struct y } : 数_自然_ペアノ@{ i }
            :=
                match y with
                    零_数_自然_ペアノ => x
                    |
                    次ぐ_数_自然_ペアノ y_p => 次ぐ_数_自然_ペアノ ( a x y_p )
                end
.

(** ペアノ式の自然数の乗算を定義します。 *)

Definition 掛ける_数_自然_ペアノ@{ i | }
    : 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i }
    :=
        fix a ( x : 数_自然_ペアノ@{ i } ) ( y : 数_自然_ペアノ@{ i } ) { struct y } : 数_自然_ペアノ@{ i }
            :=
                match y with
                    零_数_自然_ペアノ => 零_数_自然_ペアノ
                    |
                    次ぐ_数_自然_ペアノ y_p => 足す_数_自然_ペアノ x ( a x y_p )
                end
.

(** ペアノ式の自然数の冪乗を定義します。 *)

Definition 計算する_冪乗_数_自然_ペアノ@{ i | }
    : 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i }
    :=
        fix a ( x : 数_自然_ペアノ@{ i } ) ( y : 数_自然_ペアノ@{ i } ) { struct y } : 数_自然_ペアノ@{ i }
            :=
                match y with
                    零_数_自然_ペアノ => 一_数_自然_ペアノ
                    |
                    次ぐ_数_自然_ペアノ y_p => 掛ける_数_自然_ペアノ x ( a x y_p )
                end
.

(** ペアノ式の自然数の最小値を定義します。 *)

Definition 計算する_値_最小_数_自然_ペアノ@{ i | }
    : 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i }
    :=
        fix a ( x : 数_自然_ペアノ@{ i } ) ( y : 数_自然_ペアノ@{ i } ) { struct y } : 数_自然_ペアノ@{ i }
            :=
                match x with
                    零_数_自然_ペアノ => 零_数_自然_ペアノ
                    |
                    次ぐ_数_自然_ペアノ x_p
                        =>
                            match y with
                                零_数_自然_ペアノ => 零_数_自然_ペアノ
                                |
                                次ぐ_数_自然_ペアノ y_p => 次ぐ_数_自然_ペアノ ( a x_p y_p )
                            end
                end
.

(** ペアノ式の自然数の最大値を定義します。 *)

Definition 計算する_値_最大_数_自然_ペアノ@{ i | }
    : 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i }
    :=
        fix a ( x : 数_自然_ペアノ@{ i } ) ( y : 数_自然_ペアノ@{ i } ) { struct y } : 数_自然_ペアノ@{ i }
            :=
                match x with
                    零_数_自然_ペアノ => y
                    |
                    次ぐ_数_自然_ペアノ x_p
                        =>
                            match y with
                                零_数_自然_ペアノ => x
                                |
                                次ぐ_数_自然_ペアノ y_p => 次ぐ_数_自然_ペアノ ( a x_p y_p )
                            end
                end
.

(** ペアノ式の自然数の三角数を定義します。 *)

Definition 計算する_数_三角_数_自然_ペアノ@{ i | } : 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i }
    :=
        fix a ( x : 数_自然_ペアノ@{ i } ) { struct x } : 数_自然_ペアノ@{ i }
            :=
                match x with
                    零_数_自然_ペアノ => 零_数_自然_ペアノ
                    |
                    次ぐ_数_自然_ペアノ x_p => 足す_数_自然_ペアノ x ( a x_p )
                end
.

(** ペアノ式の自然数の階乗を定義します。 *)

Definition 計算する_階乗_数_自然_ペアノ@{ i | } : 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i }
    :=
        fix a ( x : 数_自然_ペアノ@{ i } ) { struct x } : 数_自然_ペアノ@{ i }
            :=
                match x with
                    零_数_自然_ペアノ => 零_数_自然_ペアノ
                    |
                    次ぐ_数_自然_ペアノ x_p => 掛ける_数_自然_ペアノ x ( a x_p )
                end
.

(** ペアノ式の自然数の二項係数を定義します。 *)

Definition 計算する_係数_二項_数_自然_ペアノ@{ i | }
    : 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i }
    :=
        fix a ( x : 数_自然_ペアノ@{ i } ) ( y : 数_自然_ペアノ@{ i } ) { struct x } : 数_自然_ペアノ@{ i }
            :=
                match x with
                    零_数_自然_ペアノ
                        =>
                            match y with
                                零_数_自然_ペアノ => 一_数_自然_ペアノ
                                |
                                次ぐ_数_自然_ペアノ y_p => 零_数_自然_ペアノ
                            end
                    |
                    次ぐ_数_自然_ペアノ x_p
                        =>
                            match y with
                                零_数_自然_ペアノ => 一_数_自然_ペアノ
                                |
                                次ぐ_数_自然_ペアノ y_p => 足す_数_自然_ペアノ ( a x_p y ) ( a x_p y_p )
                            end
                end
.

(** ペアノ式の自然数のフィボナッチ数列を定義します。 *)

Definition 計算する_列_数_フィボナッチ_数_自然_ペアノ@{ i | } : 数_自然_ペアノ@{ i } -> 数_自然_ペアノ@{ i }
    :=
        let
            fix a
                ( x : 数_自然_ペアノ@{ i } )
                ( y : 数_自然_ペアノ@{ i } )
                ( z : 数_自然_ペアノ@{ i } )
                { struct x }
                : 数_自然_ペアノ@{ i }
                :=
                    match x with
                        零_数_自然_ペアノ => y
                        |
                        次ぐ_数_自然_ペアノ x_p => a x_p z ( 足す_数_自然_ペアノ z y )
                    end
        in
            fun x : 数_自然_ペアノ@{ i } => a x 零_数_自然_ペアノ 一_数_自然_ペアノ
.

(** 道の型を定義します。 *)

Inductive 道@{ i | } ( A : Type@{ i } ) ( a : A ) : A -> Type@{ i } := 道_恒等 : 道 A a a.

(** ペアノ式の自然数に関する関数を検算します。 *)

Check 道_恒等 _ _ : 道 数_自然_ペアノ (次ぐ_数_自然_ペアノ 零_数_自然_ペアノ) 一_数_自然_ペアノ.

Check 道_恒等 _ _ : 道 数_自然_ペアノ (足す_数_自然_ペアノ 三_数_自然_ペアノ 二_数_自然_ペアノ) 五_数_自然_ペアノ.

Check 道_恒等 _ _ : 道 数_自然_ペアノ (掛ける_数_自然_ペアノ 三_数_自然_ペアノ 三_数_自然_ペアノ) 九_数_自然_ペアノ.

Check 道_恒等 _ _
    : 道 数_自然_ペアノ (計算する_冪乗_数_自然_ペアノ 二_数_自然_ペアノ 三_数_自然_ペアノ) 八_数_自然_ペアノ
.

Check 道_恒等 _ _ : 道 数_自然_ペアノ (計算する_数_三角_数_自然_ペアノ 四_数_自然_ペアノ) 十_数_自然_ペアノ.

Check 道_恒等 _ _
    :
        道
            数_自然_ペアノ
            (計算する_階乗_数_自然_ペアノ 四_数_自然_ペアノ)
            (掛ける_数_自然_ペアノ 六_数_自然_ペアノ 四_数_自然_ペアノ)
.

Check 道_恒等 _ _
    :
        道
            数_自然_ペアノ
            (計算する_係数_二項_数_自然_ペアノ 八_数_自然_ペアノ 四_数_自然_ペアノ)
            (掛ける_数_自然_ペアノ 十_数_自然_ペアノ 七_数_自然_ペアノ)
.

Check 道_恒等 _ _
    :
        道
            数_自然_ペアノ
            (計算する_列_数_フィボナッチ_数_自然_ペアノ 八_数_自然_ペアノ)
            (掛ける_数_自然_ペアノ 七_数_自然_ペアノ 三_数_自然_ペアノ)
.
