(** Playground モジュールは、まだ単独のモジュールに分割していないコードを置く場所です。 *)

(** * 他のファイルの読み込み *)

(** << Googology_In_Coq.Base >> を読み込みます。 *)

Require Googology_In_Coq.Base.

(** * 他のモジュールの取り込み *)

(** << Googology_In_Coq.Base >> を取り込みます。 *)

Import Googology_In_Coq.Base.

(** * 関数に関する定義 *)

(** 関数に関するモジュールを定義します。 *)

Module A_2024_08_26_0002 .

(** 恒等関数を定義します。 *)

Definition A_2024_07_21_0000@{ i | } : forall A : Type@{ i } , A -> A := fun A : Type@{ i } => fun x : A => x .

Definition 恒等関数@{ i | } ( A : Type@{ i } ) ( x : A ) : A := A_2024_07_21_0000@{ i } A x .

(** 関数合成を定義します。 *)

Definition A_2024_07_21_0001@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , forall C : Type@{ i } , ( B -> A ) -> ( C -> B ) -> C -> A
    := fun A : Type@{ i } => fun B : Type@{ i } => fun C : Type@{ i } => fun f : B -> A => fun g : C -> B => fun x : C => f ( g x )
.

Definition 合成する@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) ( C : Type@{ i } ) ( f : B -> A ) ( g : C -> B ) ( x : C ) : A
    := A_2024_07_21_0001@{ i } A B C f g x
.

(** 二個の引数を取る依存関数を取り、その二個の引数を入れ替えます。 *)

Definition A_2024_08_02_0002@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        forall C : A -> B -> Type@{ i } ,
        ( forall x : A , forall y : B , C x y )
        ->
        forall y : B , forall x : A , C x y
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun C : A -> B -> Type@{ i } =>
        fun f : forall x : A , forall y : B , C x y =>
        fun y : B => fun x : A => f x y
.

(** ある値を取り、その値を常に返す定数関数を作ります。 *)

Definition A_2024_07_21_0002@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , A -> B -> A
    := fun A : Type@{ i } => fun B : Type@{ i } => fun x : A => fun y : B => x
.

Definition 定数関数を作る@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) ( x : A ) ( y : B ) : A := A_2024_07_21_0002@{ i } A B x y .

End A_2024_08_26_0002 .

(** * 空型に関する定義 *)

(** 空型に関するモジュールを定義します。 *)

Module A_2024_08_26_0003 .

(** 空型を定義します。「空型」は "empty type" の訳語です。 *)

Inductive A_2024_07_21_0003@{ i | } : Type@{ i } := .

Definition 空型@{ i | } : Type@{ i } := A_2024_07_21_0003@{ i } .

Module A_2024_07_21_0003 .

(** 空型について場合分けします。 *)

Definition A_2024_07_21_0004@{ i | }
    : 空型@{ i } -> forall 目標 : Type@{ i } , 目標
    := fun 対象 : 空型@{ i } => fun 目標 : Type@{ i } => match 対象 with end
.

Definition 場合分け@{ i | } ( 対象 : 空型@{ i } ) ( 目標 : Type@{ i } ) : 目標 := A_2024_07_21_0004@{ i } 対象 目標 .

(** 空型について依存型の場合分けをします。 *)

Definition A_2024_08_26_0004@{ i | }
    : forall 対象 : 空型@{ i } , forall 目標 : 空型@{ i } -> Type@{ i } , 目標 対象
    := fun 対象 : 空型@{ i } => fun 目標 : 空型@{ i } -> Type@{ i } => match 対象 as 対象_ return 目標 対象_ with end
.

Definition 依存型の場合分け@{ i | } ( 対象 : 空型@{ i } ) ( 目標 : 空型@{ i } -> Type@{ i } ) : 目標 対象
    := A_2024_08_26_0004@{ i } 対象 目標
.

End A_2024_07_21_0003 .

Module 空型 := A_2024_07_21_0003 .

(** 空型の値が存在する時には終了することができます。 *)

Definition A_2024_08_27_0007@{ i | } ( A : Type@{ i } ) ( x : 空型@{ i } ) : A := 空型.場合分け x A .

Definition 終了する@{ i | } ( A : Type@{ i } ) ( x : 空型@{ i } ) : A := A_2024_08_27_0007 A x .

(** 対偶を取る関数です。 *)

Definition A_2024_07_21_0008@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , ( A -> B ) -> ( B -> 空型@{ i } ) -> A -> 空型@{ i }
    := fun A : Type@{ i } => fun B : Type@{ i } => fun f : A -> B => fun x : B -> 空型@{ i } => fun y : A => x ( f y )
.

End A_2024_08_26_0003 .

(** * 否定型に関する定義 *)

(** 否定型に関するモジュールを定義します。 *)

Module A_2024_08_27_0000 .

(** << A_2024_08_26_0003 >> を取り込みます。 *)

Import A_2024_08_26_0003 .

(** 否定を表す型を定義します。これを「否定型」と呼びます。 *)

Inductive A_2024_08_01_0001@{ i | } ( A : Type@{ i } ) : Type@{ i }
    := A_2024_08_01_0002 : ( A -> 空型@{ i } ) -> A_2024_08_01_0001 A
.

Definition 否定型@{ i | } ( A : Type@{ i } ) : Type@{ i } := A_2024_08_01_0001@{ i } A .

Module A_2024_08_01_0001 .

Definition 構築子@{ i | } ( A : Type@{ i } ) ( x : A -> 空型@{ i } ) : 否定型@{ i } A := A_2024_08_01_0002@{ i } A x .

(** [A] の否定を分解します。 *)

Definition A_2024_08_01_0003@{ i | }
    : forall A : Type@{ i } , 否定型@{ i } A -> A -> 空型@{ i }
    := fun A : Type@{ i } => fun 対象 : 否定型@{ i } A => fun x : A => match 対象 with A_2024_08_01_0002 _ 対象_中身 => 対象_中身 x end
.

Definition 分解子@{ i | } ( A : Type@{ i } ) ( 対象 : 否定型@{ i } A ) ( x : A ) : 空型@{ i }
    := A_2024_08_01_0003@{ i } A 対象 x
.

(** 否定型について場合分けします。 *)

Definition A_2024_08_27_0001@{ i | }
    : forall A : Type@{ i } , 否定型@{ i } A -> forall 目標 : Type@{ i } , ( ( A -> 空型@{ i } ) -> 目標 ) -> 目標
    :=
        fun A : Type@{ i } =>
        fun 対象 : 否定型@{ i } A =>
        fun 目標 : Type@{ i } =>
        fun 処理 : ( A -> 空型@{ i } ) -> 目標 =>
        match 対象 with A_2024_08_01_0002 _ 対象_中身 => 処理 対象_中身 end
.

Definition 場合分け@{ i | }
    ( A : Type@{ i } )
    ( 対象 : 否定型@{ i } A )
    ( 目標 : Type@{ i } )
    ( 処理 : ( A -> 空型@{ i } ) -> 目標 )
    : 目標
    := A_2024_08_27_0001@{ i } A 対象 目標 処理
.

(** 否定型について依存型の場合分けをします。 *)

Definition A_2024_08_27_0002@{ i | }
    :
        forall A : Type@{ i } ,
        forall 対象 : 否定型@{ i } A ,
        forall 目標 : 否定型@{ i } A -> Type@{ i } ,
        ( forall 対象_中身 : A -> 空型@{ i } , 目標 ( 構築子@{ i } A 対象_中身 ) )
        ->
        目標 対象
    :=
        fun A : Type@{ i } =>
        fun 対象 : 否定型@{ i } A =>
        fun 目標 : 否定型@{ i } A -> Type@{ i } =>
        fun 処理 : forall 対象_中身 : A -> 空型@{ i } , 目標 ( 構築子@{ i } A 対象_中身 ) =>
        match 対象 as 対象_ return 目標 対象_ with A_2024_08_01_0002 _ 対象_中身 => 処理 対象_中身 end
.

Definition 依存型の場合分け@{ i | }
    ( A : Type@{ i } )
    ( 対象 : 否定型@{ i } A )
    ( 目標 : 否定型@{ i } A -> Type@{ i } )
    ( 処理 : forall 対象_中身 : A -> 空型@{ i } , 目標 ( 構築子@{ i } A 対象_中身 ) )
    : 目標 対象
    := A_2024_08_27_0002@{ i } A 対象 目標 処理
.

(** 否定型についての余場合分けです。 *)

Definition A_2024_08_27_0003@{ i | }
    : forall A : Type@{ i } , forall 前提 : Type@{ i } , ( 前提 -> A -> 空型@{ i } ) -> 前提 -> 否定型@{ i } A
    :=
        fun A : Type@{ i } =>
        fun 前提 : Type@{ i } =>
        fun 処理 : 前提 -> A -> 空型@{ i } =>
        fun 対象 : 前提 =>
        A_2024_08_01_0002@{ i } A ( 処理 対象 )
.

Definition 余場合分け@{ i | }
    ( A : Type@{ i } )
    ( 前提 : Type@{ i } )
    ( 処理 : 前提 -> A -> 空型@{ i } )
    ( 対象 : 前提 )
    : 否定型@{ i } A
    := A_2024_08_27_0003@{ i } A 前提 処理 対象
.

End A_2024_08_01_0001 .

Module 否定型 := A_2024_08_01_0001 .

(** 対偶を取る関数です。 *)

Definition A_2024_08_01_0004@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , ( A -> B ) -> 否定型@{ i } B -> 否定型@{ i } A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun f : A -> B =>
        fun x : 否定型@{ i } B =>
        否定型.構築子@{ i } A ( fun y : A => 否定型.分解子@{ i } B x ( f y ) )
.

Definition 対偶を取る@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) ( f : A -> B ) ( x : 否定型@{ i } B ) : 否定型@{ i } A
    := A_2024_08_01_0004@{ i } A B f x
.

End A_2024_08_27_0000 .

(** * 直和型に関する定義 *)

(** 直和型に関するモジュールを定義します。 *)

Module A_2024_08_27_0004 .

(** << A_2024_08_26_0003 >> を取り込みます。 *)

Import A_2024_08_26_0003 .

(** << A_2024_08_27_0000 >> を取り込みます。 *)

Import A_2024_08_27_0000 .

(** 直和型を定義します。 *)

Inductive A_2024_07_21_0005@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) : Type@{ i }
    := A_2024_07_21_0006 : A -> A_2024_07_21_0005 A B | A_2024_07_21_0007 : B -> A_2024_07_21_0005 A B
.

Definition 直和型@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) : Type@{ i } := A_2024_07_21_0005@{ i } A B .

Module A_2024_07_21_0005 .

Definition 左の場合の構築子@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) ( x : A ) : 直和型@{ i } A B
    := A_2024_07_21_0006@{ i } A B x
.

Definition 右の場合の構築子@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) ( x : B ) : 直和型@{ i } A B
    := A_2024_07_21_0007@{ i } A B x
.

(** 直和型について場合分けします。 *)

Definition A_2024_08_27_0005@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        直和型@{ i } A B
        ->
        forall 目標 : Type@{ i } ,
        ( A -> 目標 )
        ->
        ( B -> 目標 )
        ->
        目標
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 対象 : 直和型@{ i } A B =>
        fun 目標 : Type@{ i } =>
        fun 左の場合の処理 : A -> 目標 =>
        fun 右の場合の処理 : B -> 目標 =>
        match
            対象
        with
            A_2024_07_21_0006 _ _ 対象_左 => 左の場合の処理 対象_左
            |
            A_2024_07_21_0007 _ _ 対象_右 => 右の場合の処理 対象_右
        end
.

Definition 場合分け@{ i | }
    ( A : Type@{ i } )
    ( B : Type@{ i } )
    ( 対象 : 直和型@{ i } A B )
    ( 目標 : Type@{ i } )
    ( 左の場合の処理 : A -> 目標 )
    ( 右の場合の処理 : B -> 目標 )
    : 目標
    := A_2024_08_27_0005@{ i } A B 対象 目標 左の場合の処理 右の場合の処理
.

(** 直和型について依存型の場合分けをします。 *)

Definition A_2024_08_27_0006@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        forall 対象 : 直和型@{ i } A B ,
        forall 目標 : 直和型@{ i } A B -> Type@{ i } ,
        ( forall 対象_左 : A , 目標 ( 左の場合の構築子@{ i } A B 対象_左 ) )
        ->
        ( forall 対象_右 : B , 目標 ( 右の場合の構築子@{ i } A B 対象_右 ) )
        ->
        目標 対象
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 対象 : 直和型@{ i } A B =>
        fun 目標 : 直和型@{ i } A B -> Type@{ i } =>
        fun 左の場合の処理 : forall 対象_左 : A , 目標 ( 左の場合の構築子@{ i } A B 対象_左 ) =>
        fun 右の場合の処理 : forall 対象_右 : B , 目標 ( 右の場合の構築子@{ i } A B 対象_右 ) =>
        match
            対象
        as
            対象_
        return
            目標 対象_
        with
            A_2024_07_21_0006 _ _ 対象_左 => 左の場合の処理 対象_左
            |
            A_2024_07_21_0007 _ _ 対象_右 => 右の場合の処理 対象_右
        end
.

Definition 依存型の場合分け@{ i | }
    ( A : Type@{ i } )
    ( B : Type@{ i } )
    ( 対象 : 直和型@{ i } A B )
    ( 目標 : 直和型@{ i } A B -> Type@{ i } )
    ( 左の場合の処理 : forall 対象_左 : A , 目標 ( 左の場合の構築子@{ i } A B 対象_左 ) )
    ( 右の場合の処理 : forall 対象_右 : B , 目標 ( 右の場合の構築子@{ i } A B 対象_右 ) )
    : 目標 対象
    := A_2024_08_27_0006@{ i } A B 対象 目標 左の場合の処理 右の場合の処理
.

End A_2024_07_21_0005 .

Module 直和型 := A_2024_07_21_0005 .

(** 直和型の値において、それが右の型の値である時に空型の値を生み出す場合、必ず左の型の値を取り出すことが出来ます。 *)

Definition A_2024_07_21_0009@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , ( B -> 空型@{ i } ) -> 直和型@{ i } A B -> A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 証拠 : B -> 空型@{ i } =>
        fun x : 直和型@{ i } A B =>
        直和型.場合分け A B x A ( fun x_左 : A => x_左 ) ( fun x_右 : B => 終了する@{ i } A ( 証拠 x_右 ) )
.

(** 直和型の値において、それが左の型の値である時に空型の値を生み出す場合、必ず右の型の値を取り出すことが出来ます。 *)

Definition A_2024_07_21_0010@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , ( B -> 空型@{ i } ) -> 直和型@{ i } B A -> A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 証拠 : B -> 空型@{ i } =>
        fun x : 直和型@{ i } B A =>
        直和型.場合分け B A x A ( fun x_左 : B => 終了する@{ i } A ( 証拠 x_左 ) ) ( fun x_右 : A => x_右 )
.

(** 直和型の値において、その右の型の否定の値がある場合、必ず左の型の値を取り出すことが出来ます。 *)

Definition A_2024_08_02_0000@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , 否定型@{ i } B -> 直和型@{ i } A B -> A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 証拠 : 否定型@{ i } B =>
        fun x : 直和型@{ i } A B =>
        直和型.場合分け A B x A ( fun x_左 : A => x_左 ) ( fun x_右 : B => 終了する@{ i } A ( 否定型.分解子@{ i } B 証拠 x_右 ) )
.

(** 直和型の値において、その左の型の否定の値がある場合、必ず右の型の値を取り出すことが出来ます。 *)

Definition A_2024_08_02_0001@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , 否定型@{ i } B -> 直和型@{ i } B A -> A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 証拠 : 否定型@{ i } B =>
        fun x : 直和型@{ i } B A =>
        直和型.場合分け B A x A ( fun x_左 : B => 終了する@{ i } A ( 否定型.分解子@{ i } B 証拠 x_左 ) ) ( fun x_右 : A => x_右 )
.

End A_2024_08_27_0004 .

(** * 単一型に関する定義 *)

(** 単一型に関するモジュールを定義します。 *)

Module A_2024_08_28_0000 .

(** << A_2024_08_26_0002 >> を取り込みます。 *)

Import A_2024_08_26_0002 .

(** << A_2024_08_26_0003 >> を取り込みます。 *)

Import A_2024_08_26_0003 .

(** 単一型を定義します。「単一型」は "unit type" の訳語です。 *)

Inductive A_2024_07_21_0011@{ i | } : Type@{ i } := A_2024_07_21_0012 : A_2024_07_21_0011 .

Definition 単一型@{ i | } : Type@{ i } := A_2024_07_21_0011@{ i } .

Module A_2024_07_21_0011 .

(** 単一型についての余場合分けです。 *)

Definition A_2024_08_28_0001@{ i | }
    : forall 前提 : Type@{ i } , 前提 -> 単一型@{ i }
    := fun 前提 : Type@{ i } => fun 対象 : 前提 => A_2024_07_21_0012@{ i }
.

Definition 余場合分け@{ i | } ( 前提 : Type@{ i } ) ( 対象 : 前提 ) : 単一型@{ i } := A_2024_08_28_0001@{ i } 前提 対象 .

(** 単一型についての余場合分けの整合性です。 *)

Definition A_2024_08_28_0003@{ i | }
    :
        forall 前提 : Type@{ i } ,
        forall 余表示射 : 単一型@{ i } -> 前提 ,
        forall 対象 : 単一型@{ i } ,
        forall 述語 : 単一型@{ i } -> Type@{ i } ,
        述語 ( 余場合分け@{ i } 前提 ( 余表示射 対象 ) )
        ->
        述語 対象
    :=
        fun 前提 : Type@{ i } =>
        fun 余表示射 : 単一型@{ i } -> 前提 =>
        fun 対象 : 単一型@{ i } =>
        match
            対象
        as
            対象_
        return
            forall 述語 : 単一型@{ i } -> Type@{ i } ,
            述語 ( 余場合分け@{ i } 前提 ( 余表示射 対象_ ) )
            ->
            述語 対象_
        with
            A_2024_07_21_0012
                =>
                    fun 述語 : 単一型@{ i } -> Type@{ i } =>
                    fun x : 述語 ( 余場合分け@{ i } 前提 ( 余表示射 A_2024_07_21_0012@{ i } ) ) =>
                    x
        end
.

Definition 余場合分けの整合性@{ i | }
    ( 前提 : Type@{ i } )
    ( 余表示射 : 単一型@{ i } -> 前提 )
    ( 対象 : 単一型@{ i } )
    ( 述語 : 単一型@{ i } -> Type@{ i } )
    ( x : 述語 ( 余場合分け@{ i } 前提 ( 余表示射 対象 ) ) )
    : 述語 対象
    := A_2024_08_28_0003@{ i } 前提 余表示射 対象 述語 x
.

End A_2024_07_21_0011 .

Module 単一型 := A_2024_07_21_0011 .

(** 単一型の唯一の値です。 *)

Definition A_2024_08_28_0002@{ i | }
    : 単一型@{ i }
    := 単一型.余場合分け@{ i } ( 空型@{ i } -> 空型@{ i } ) ( 恒等関数@{ i } 空型@{ i } )
.

Definition 単一値@{ i | } : 単一型@{ i } := A_2024_08_28_0002@{ i } .

(** 単一型について場合分けします。 *)

Definition A_2024_08_28_0004@{ i | }
    : 単一型@{ i } -> forall 目標 : Type@{ i } , 目標 -> 目標
    := fun 対象 : 単一型@{ i } => fun 目標 : Type@{ i } => fun 処理 : 目標 => 処理
.

(** 単一型について依存型の場合分けをします。 *)

Definition A_2024_08_28_0005@{ i | }
    : forall 対象 : 単一型@{ i } , forall 目標 : 単一型@{ i } -> Type@{ i } , 目標 単一値@{ i } -> 目標 対象
    :=
        fun 対象 : 単一型@{ i } =>
        fun 目標 : 単一型@{ i } -> Type@{ i } =>
        fun 処理 : 目標 単一値@{ i } =>
        単一型.余場合分けの整合性@{ i } ( 単一型@{ i } ) ( 恒等関数@{ i } ( 単一型@{ i } ) ) 対象 目標 処理
.

End A_2024_08_28_0000 .

(** * 直積型に関する定義 *)

(** 直積型に関するモジュールを定義します。 *)

Module A_2024_08_28_0006 .

(** << A_2024_08_26_0002 >> を取り込みます。 *)

Import A_2024_08_26_0002 .

(** << A_2024_08_28_0000 >> を取り込みます。 *)

Import A_2024_08_28_0000 .

(** 直積型を定義します。 *)

Inductive A_2024_07_21_0013@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) : Type@{ i }
    := A_2024_07_21_0014 : A -> B -> A_2024_07_21_0013 A B
.

Definition 直積型@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) : Type@{ i } := A_2024_07_21_0013@{ i } A B .

Module A_2024_07_21_0013 .

(** 一番目の区域の値を取り出します。「区域」は "field" の訳語です。 *)

Definition A_2024_07_21_0015@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , 直積型@{ i } A B -> A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 対象 : 直積型@{ i } A B =>
        match 対象 with A_2024_07_21_0014 _ _ 対象_1 対象_2 => 対象_1 end
.

Definition 一番目の区域の分解子@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) ( 対象 : 直積型@{ i } A B ) : A
    := A_2024_07_21_0015 A B 対象
.

(** 二番目の区域の値を取り出します。「区域」は "field" の訳語です。 *)

Definition A_2024_07_21_0016@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , 直積型@{ i } B A -> A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 対象 : 直積型@{ i } B A =>
        match 対象 with A_2024_07_21_0014 _ _ 対象_1 対象_2 => 対象_2 end
.

Definition 二番目の区域の分解子@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) ( 対象 : 直積型@{ i } B A ) : A
    := A_2024_07_21_0016 A B 対象
.

(** 直積型についての余場合分けです。 *)

Definition A_2024_08_28_0007@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        forall 前提 : Type@{ i } ,
        ( 前提 -> A )
        ->
        ( 前提 -> B )
        ->
        前提
        ->
        直積型@{ i } A B
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 前提 : Type@{ i } =>
        fun 一番目の区域の処理 : 前提 -> A =>
        fun 二番目の区域の処理 : 前提 -> B =>
        fun 対象 : 前提 =>
        A_2024_07_21_0014@{ i } A B ( 一番目の区域の処理 対象 ) ( 二番目の区域の処理 対象 )
.

Definition 余場合分け@{ i | }
    ( A : Type@{ i } )
    ( B : Type@{ i } )
    ( 前提 : Type@{ i } )
    ( 一番目の区域の処理 : 前提 -> A )
    ( 二番目の区域の処理 : 前提 -> B )
    ( 対象 : 前提 )
    : 直積型@{ i } A B
    := A_2024_08_28_0007@{ i } A B 前提 一番目の区域の処理 二番目の区域の処理 対象
.

(** 直積型についての余場合分けの整合性です。 *)

Definition A_2024_08_28_0008@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        forall 前提 : Type@{ i } ,
        forall 余表示射 : 直積型@{ i } A B -> 前提 ,
        forall 一番目の区域の処理 : 前提 -> A ,
        (
            forall 対象 : 直積型@{ i } A B ,
            forall 述語 : A -> Type@{ i } ,
            述語 ( 一番目の区域の処理 ( 余表示射 対象 ) )
            ->
            述語 ( 一番目の区域の分解子@{ i } A B 対象 )
        )
        ->
        forall 二番目の区域の処理 : 前提 -> B ,
        (
            forall 対象 : 直積型@{ i } A B ,
            forall 述語 : B -> Type@{ i } ,
            述語 ( 二番目の区域の処理 ( 余表示射 対象 ) )
            ->
            述語 ( 二番目の区域の分解子@{ i } B A 対象 )
        )
        ->
        forall 対象 : 直積型@{ i } A B ,
        forall 述語 : 直積型@{ i } A B -> Type@{ i } ,
        述語 ( 余場合分け@{ i } A B 前提 一番目の区域の処理 二番目の区域の処理 ( 余表示射 対象 ) )
        ->
        述語 対象
.
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( fun B : Type@{ i } => _ ) .
    refine ( fun 前提 : Type@{ i } => _ ) .
    refine ( fun 余表示射 : 直積型@{ i } A B -> 前提 => _ ) .
    refine ( fun 一番目の区域の処理 : 前提 -> A => _ ) .
    refine
        (
            fun
                一番目の区域の処理の整合性
                    :
                        forall 対象 : 直積型@{ i } A B ,
                        forall 述語 : A -> Type@{ i } ,
                        述語 ( 一番目の区域の処理 ( 余表示射 対象 ) )
                        ->
                        述語 ( 一番目の区域の分解子@{ i } A B 対象 )
            =>
                _
        )
    .
    refine ( fun 二番目の区域の処理 : 前提 -> B => _ ) .
    refine
        (
            fun
                二番目の区域の処理の整合性
                    :
                        forall 対象 : 直積型@{ i } A B ,
                        forall 述語 : B -> Type@{ i } ,
                        述語 ( 二番目の区域の処理 ( 余表示射 対象 ) )
                        ->
                        述語 ( 二番目の区域の分解子@{ i } B A 対象 )
            =>
                _
        )
    .
    refine ( fun 対象 : 直積型@{ i } A B => _ ) .
    refine
        (
            match
                対象
            as
                対象_
            return
                forall 述語 : 直積型@{ i } A B -> Type@{ i } ,
                述語 ( 余場合分け@{ i } A B 前提 一番目の区域の処理 二番目の区域の処理 ( 余表示射 対象_ ) )
                ->
                述語 対象_
            with
                A_2024_07_21_0014 _ _ 対象_1 対象_2 => _
            end
        )
    .
    refine ( fun 述語 : 直積型@{ i } A B -> Type@{ i } => _ ) .
    refine
        (
            fun
                x
                    :
                        述語
                            (
                                余場合分け@{ i }
                                    A
                                    B
                                    前提
                                    一番目の区域の処理
                                    二番目の区域の処理
                                    ( 余表示射 ( A_2024_07_21_0014@{ i } A B 対象_1 対象_2 ) )
                            )
            =>
                _
        )
    .
    refine
        (
            一番目の区域の処理の整合性
                ( A_2024_07_21_0014@{ i } A B 対象_1 対象_2 )
                ( fun 対象_1_ : A => 述語 ( A_2024_07_21_0014@{ i } A B 対象_1_ 対象_2 ) )
                _
        )
    .
    refine
        (
            二番目の区域の処理の整合性
                ( A_2024_07_21_0014@{ i } A B 対象_1 対象_2 )
                (
                    fun 対象_2_ : B =>
                    述語
                    (
                        A_2024_07_21_0014@{i}
                            A
                            B
                            ( 一番目の区域の処理 ( 余表示射 ( A_2024_07_21_0014@{ i } A B 対象_1 対象_2 ) ) )
                            対象_2_
                    )
                )
                _
        )
    .
    exact x .
Defined .

Definition 余場合分けの整合性@{ i | }
    ( A : Type@{ i } )
    ( B : Type@{ i } )
    ( 前提 : Type@{ i } )
    ( 余表示射 : 直積型@{ i } A B -> 前提 )
    ( 一番目の区域の処理 : 前提 -> A )
    (
        一番目の区域の処理の整合性
            :
                forall 対象 : 直積型@{ i } A B ,
                forall 述語 : A -> Type@{ i } ,
                述語 ( 一番目の区域の処理 ( 余表示射 対象 ) )
                ->
                述語 ( 一番目の区域の分解子@{ i } A B 対象 )
    )
    ( 二番目の区域の処理 : 前提 -> B )
    (
        二番目の区域の処理の整合性
            :
                forall 対象 : 直積型@{ i } A B ,
                forall 述語 : B -> Type@{ i } ,
                述語 ( 二番目の区域の処理 ( 余表示射 対象 ) )
                ->
                述語 ( 二番目の区域の分解子@{ i } B A 対象 )
    )
    ( 対象 : 直積型@{ i } A B )
    ( 述語 : 直積型@{ i } A B -> Type@{ i } )
    ( x : 述語 ( 余場合分け@{ i } A B 前提 一番目の区域の処理 二番目の区域の処理 ( 余表示射 対象 ) ) )
    : 述語 対象
    :=
        A_2024_08_28_0008@{ i }
            A
            B
            前提
            余表示射
            一番目の区域の処理
            一番目の区域の処理の整合性
            二番目の区域の処理
            二番目の区域の処理の整合性
            対象
            述語
            x
.

End A_2024_07_21_0013 .

Module 直積型 := A_2024_07_21_0013 .

(** 直積型を構築します。 *)

Definition A_2024_08_28_0009@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , A -> B -> 直積型@{ i } A B
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 対象_1 : A =>
        fun 対象_2 : B =>
            直積型.余場合分け@{ i }
                A
                B
                単一型@{ i }
                ( 定数関数を作る@{ i } A 単一型@{ i } 対象_1 )
                ( 定数関数を作る@{ i } B 単一型@{ i } 対象_2 )
                単一値@{ i }
.

Definition 直積型を構築する@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) ( x_1 : A ) ( x_2 : B ) : 直積型@{ i } A B
    := A_2024_08_28_0009@{ i } A B x_1 x_2
.

(** 直積型について場合分けします。 *)

Definition A_2024_08_28_0010@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        直積型@{ i } A B
        ->
        forall 目標 : Type@{ i } ,
        ( A -> B -> 目標 )
        ->
        目標
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 対象 : 直積型@{ i } A B =>
        fun 目標 : Type@{ i } =>
        fun 処理 : A -> B -> 目標 =>
        処理 ( 直積型.一番目の区域の分解子@{ i } A B 対象 ) ( 直積型.二番目の区域の分解子@{ i } B A 対象 )
.

(** 直積型について依存型の場合分けをします。 *)

Definition A_2024_08_28_0011@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        forall 対象 : 直積型@{ i } A B ,
        forall 目標 : 直積型@{ i } A B -> Type@{ i } ,
        ( forall 対象_1 : A , forall 対象_2 : B , 目標 ( 直積型を構築する@{ i } A B 対象_1 対象_2 ) )
        ->
        目標 対象
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 対象 : 直積型@{ i } A B =>
        fun 目標 : 直積型@{ i } A B -> Type@{ i } =>
        fun 処理 : forall 対象_1 : A , forall 対象_2 : B , 目標 ( 直積型を構築する@{ i } A B 対象_1 対象_2 ) =>
        直積型.余場合分けの整合性@{ i }
            A
            B
            ( 直積型@{ i } A B )
            ( 恒等関数@{ i } ( 直積型@{ i } A B ) )
            ( 直積型.一番目の区域の分解子@{ i } A B )
            (
                fun 対象 : 直積型@{ i } A B =>
                fun 述語 : A -> Type@{ i } =>
                fun x : 述語 ( 直積型.一番目の区域の分解子@{ i } A B ( 恒等関数@{ i } ( 直積型@{ i } A B ) 対象 ) ) =>
                x
            )
            ( 直積型.二番目の区域の分解子@{ i } B A )
            (
                fun 対象 : 直積型@{ i } A B =>
                fun 述語 : B -> Type@{ i } =>
                fun x : 述語 ( 直積型.二番目の区域の分解子@{ i } B A ( 恒等関数@{ i } ( 直積型@{ i } A B ) 対象 ) ) =>
                x
            )
            対象
            目標
            ( 処理 ( 直積型.一番目の区域の分解子@{ i } A B 対象 ) ( 直積型.二番目の区域の分解子@{ i } B A 対象 ) )
.

(** 直積型を取る関数を、それぞれの区域を取る関数に変えます。 *)

Definition A_2024_07_21_0017@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , forall C : Type@{ i } , ( 直積型@{ i } B C -> A ) -> B -> C -> A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun C : Type@{ i } =>
        fun f : 直積型@{ i } B C -> A =>
        fun x_1 : B =>
        fun x_2 : C =>
        f ( 直積型を構築する@{ i } B C x_1 x_2 )
.

(** それぞれの区域を取る関数を、直積型を取る関数に変えます。 *)

Definition A_2024_07_21_0018@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , forall C : Type@{ i } , ( B -> C -> A ) -> 直積型@{ i } B C -> A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun C : Type@{ i } =>
        fun f : B -> C -> A =>
        fun x : 直積型@{ i } B C =>
        f ( 直積型.一番目の区域の分解子@{ i } B C x ) ( 直積型.二番目の区域の分解子@{ i } C B x )
.

End A_2024_08_28_0006 .

(** * 依存直和型に関する定義 *)

(** 依存直和型に関するモジュールを定義します。 *)

Module A_2024_08_30_0000 .

(** 依存直和型を定義します。 *)

Inductive A_2024_07_21_0019@{ i | } ( A : Type@{ i } ) ( B : A -> Type@{ i } ) : Type@{ i }
    := A_2024_07_21_0020 : forall x : A , B x -> A_2024_07_21_0019 A B
.

Definition 依存直和型@{ i | } ( A : Type@{ i } ) ( B : A -> Type@{ i } ) : Type@{ i } := A_2024_07_21_0019@{ i } A B .

Module A_2024_07_21_0019 .

Definition 構築子@{ i | } ( A : Type@{ i } ) ( B : A -> Type@{ i } ) ( x_1 : A ) ( x_2 : B x_1 ) : 依存直和型@{ i } A B
    := A_2024_07_21_0020@{ i } A B x_1 x_2
.

(** 依存直和型について場合分けします。 *)

Definition A_2024_08_30_0001@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : A -> Type@{ i } ,
        依存直和型@{ i } A B
        ->
        forall 目標 : Type@{ i } ,
        ( forall 対象_1 : A , B 対象_1 -> 目標 )
        ->
        目標
    :=
        fun A : Type@{ i } =>
        fun B : A -> Type@{ i } =>
        fun 対象 : 依存直和型@{ i } A B =>
        fun 目標 : Type@{ i } =>
        fun 処理 : forall 対象_1 : A , B 対象_1 -> 目標 =>
        match 対象 with A_2024_07_21_0020 _ _ 対象_1 対象_2 => 処理 対象_1 対象_2 end
.

Definition 場合分け@{ i | }
    ( A : Type@{ i } )
    ( B : A -> Type@{ i } )
    ( 対象 : 依存直和型@{ i } A B )
    ( 目標 : Type@{ i } )
    ( 処理 : forall 対象_1 : A , B 対象_1 -> 目標 )
    : 目標
    := A_2024_08_30_0001@{ i } A B 対象 目標 処理
.

(** 依存直和型について依存型の場合分けをします。 *)

Definition A_2024_08_30_0002@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : A -> Type@{ i } ,
        forall 対象 : 依存直和型@{ i } A B ,
        forall 目標 : 依存直和型@{ i } A B -> Type@{ i } ,
        ( forall 対象_1 : A , forall 対象_2 : B 対象_1 , 目標 ( 構築子@{ i } A B 対象_1 対象_2 ) )
        ->
        目標 対象
    :=
        fun A : Type@{ i } =>
        fun B : A -> Type@{ i } =>
        fun 対象 : 依存直和型@{ i } A B =>
        fun 目標 : 依存直和型@{ i } A B -> Type@{ i } =>
        fun 処理 : forall 対象_1 : A , forall 対象_2 : B 対象_1 , 目標 ( 構築子@{ i } A B 対象_1 対象_2 ) =>
        match
            対象
        as
            対象_
        return
            目標 対象_
        with
            A_2024_07_21_0020 _ _ 対象_1 対象_2 => 処理 対象_1 対象_2
        end
.

Definition 依存型の場合分け@{ i | }
    ( A : Type@{ i } )
    ( B : A -> Type@{ i } )
    ( 対象 : 依存直和型@{ i } A B )
    ( 目標 : 依存直和型@{ i } A B -> Type@{ i } )
    ( 処理 : forall 対象_1 : A , forall 対象_2 : B 対象_1 , 目標 ( 構築子@{ i } A B 対象_1 対象_2 ) )
    : 目標 対象
    := A_2024_08_30_0002@{ i } A B 対象 目標 処理
.

End A_2024_07_21_0019 .

Module 依存直和型 := A_2024_07_21_0019 .

(** 一番目の区域の値を取り出します *)

Definition A_2024_07_21_0021@{ i | } : forall A : Type@{ i } , forall B : A -> Type@{ i } , 依存直和型@{ i } A B -> A
    :=
        fun A : Type@{ i } =>
        fun B : A -> Type@{ i } =>
        fun x : 依存直和型@{ i } A B =>
        依存直和型.場合分け A B x A ( fun x_1 : A => fun x_2 : B x_1 => x_1 )
.

(** 二番目の区域の値を取り出します *)

Definition A_2024_07_21_0022@{ i | }
    : forall A : Type@{ i } , forall B : A -> Type@{ i } , forall x : 依存直和型@{ i } A B , B ( A_2024_07_21_0021@{ i } A B x )
    :=
        fun A : Type@{ i } =>
        fun B : A -> Type@{ i } =>
        fun x : 依存直和型@{ i } A B =>
        依存直和型.依存型の場合分け
            A
            B
            x
            ( fun x_ : 依存直和型@{ i } A B => B ( A_2024_07_21_0021@{ i } A B x_ ) )
            ( fun x_1 : A => fun x_2 : B x_1 => x_2 )
.

(** 依存直和型を取る関数を、それぞれの区域を取る関数に変えます。 *)

Definition A_2024_07_21_0023@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        forall C : B -> Type@{ i } ,
        ( 依存直和型@{ i } B C -> A )
        ->
        forall x_1 : B ,
        C x_1
        ->
        A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun C : B -> Type@{ i } =>
        fun f : 依存直和型@{ i } B C -> A =>
        fun x_1 : B =>
        fun x_2 : C x_1 =>
        f ( 依存直和型.構築子@{ i } B C x_1 x_2 )
.

(** それぞれの区域を取る関数を、依存直和型を取る関数に変えます。 *)

Definition A_2024_07_21_0024@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        forall C : B -> Type@{ i } ,
        ( forall x_1 : B , C x_1 -> A )
        ->
        forall x : 依存直和型@{ i } B C ,
        A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun C : B -> Type@{ i } =>
        fun f : forall x_1 : B , C x_1 -> A =>
        fun x : 依存直和型@{ i } B C =>
        依存直和型.場合分け B C x A f
.

End A_2024_08_30_0000 .

(** * ブール型に関する定義 *)

(** ブール型に関するモジュールを定義します。 *)

Module A_2024_08_30_0003 .

(** ブール型を定義します。「ブール型」は "boolean type" の訳語です。 *)

Inductive A_2024_07_21_0025@{ i | } : Type@{ i }
    :=
        A_2024_07_21_0026 : A_2024_07_21_0025
        |
        A_2024_07_21_0027 : A_2024_07_21_0025
.

Definition ブール型@{ i | } : Type@{ i } := A_2024_07_21_0025@{ i } .

Module A_2024_07_21_0025 .

Definition 偽の場合の構築子@{ i | } : ブール型@{ i } := A_2024_07_21_0026@{ i } .

Definition 真の場合の構築子@{ i | } : ブール型@{ i } := A_2024_07_21_0027@{ i } .

(** ブール型について場合分けします。 *)

Definition A_2024_08_30_0004@{ i | }
    : ブール型@{ i } -> forall 目標 : Type@{ i } , 目標 -> 目標 -> 目標
    :=
        fun 対象 : ブール型@{ i } =>
        fun 目標 : Type@{ i } =>
        fun 偽の場合の処理 : 目標 =>
        fun 真の場合の処理 : 目標 =>
        match
            対象
        with
            A_2024_07_21_0026 => 偽の場合の処理
            |
            A_2024_07_21_0027 => 真の場合の処理
        end
.

Definition 場合分け@{ i | } ( 対象 : ブール型@{ i } ) ( 目標 : Type@{ i } ) ( 偽の場合の処理 : 目標 ) ( 真の場合の処理 : 目標 ) : 目標
    := A_2024_08_30_0004@{ i } 対象 目標 偽の場合の処理 真の場合の処理
.

(** ブール型について依存型の場合分けをします。 *)

Definition A_2024_08_30_0005@{ i | }
    :
        forall 対象 : ブール型@{ i } ,
        forall 目標 : ブール型@{ i } -> Type@{ i } ,
        目標 偽の場合の構築子@{ i }
        ->
        目標 真の場合の構築子@{ i }
        ->
        目標 対象
    :=
        fun 対象 : ブール型@{ i } =>
        fun 目標 : ブール型@{ i } -> Type@{ i } =>
        fun 偽の場合の処理 : 目標 偽の場合の構築子@{ i } =>
        fun 真の場合の処理 : 目標 真の場合の構築子@{ i } =>
        match
            対象
        as
            対象_
        return
            目標 対象_
        with
            A_2024_07_21_0026 => 偽の場合の処理
            |
            A_2024_07_21_0027 => 真の場合の処理
        end
.

Definition 依存型の場合分け@{ i | }
    ( 対象 : ブール型@{ i } )
    ( 目標 : ブール型@{ i } -> Type@{ i } )
    ( 偽の場合の処理 : 目標 偽の場合の構築子@{ i } )
    ( 真の場合の処理 : 目標 真の場合の構築子@{ i } )
    : 目標 対象
    := A_2024_08_30_0005@{ i } 対象 目標 偽の場合の処理 真の場合の処理
.

End A_2024_07_21_0025 .

Module ブール型 := A_2024_07_21_0025 .

(** 偽です。 *)

Definition A_2024_08_30_0012@{ i | } : ブール型@{ i } := ブール型.偽の場合の構築子@{ i } .

Definition 偽@{ i | } : ブール型@{ i } := A_2024_08_30_0012@{ i } .

(** 真です。 *)

Definition A_2024_08_30_0013@{ i | } : ブール型@{ i } := ブール型.真の場合の構築子@{ i } .

Definition 真@{ i | } : ブール型@{ i } := A_2024_08_30_0013@{ i } .

(** 論理否定です。 *)

Definition A_2024_07_21_0028@{ i | } : ブール型@{ i } -> ブール型@{ i }
    :=
        fun x : ブール型@{ i } =>
        ブール型.場合分け
            x
            ブール型@{ i }
            真@{ i }
            偽@{ i }
.

Definition 論理否定@{ i | } ( x : ブール型@{ i } ) : ブール型@{ i } := A_2024_07_21_0028@{ i } x .

(** 論理和です。 *)

Definition A_2024_07_21_0029@{ i | } : ブール型@{ i } -> ブール型@{ i } -> ブール型@{ i }
    :=
        fun x : ブール型@{ i } =>
        ブール型.場合分け
            x
            ( ブール型@{ i } -> ブール型@{ i } )
            (
                fun y : ブール型@{ i } =>
                ブール型.場合分け
                    y
                    ブール型@{ i }
                    偽@{ i }
                    真@{ i }
            )
            (
                fun y : ブール型@{ i } =>
                ブール型.場合分け
                    y
                    ブール型@{ i }
                    真@{ i }
                    真@{ i }
            )
.

Definition 論理和@{ i | } ( x : ブール型@{ i } ) ( y : ブール型@{ i } ) : ブール型@{ i } := A_2024_07_21_0029@{ i } x y .

(** 論理積です。 *)

Definition A_2024_07_21_0030@{ i | } : ブール型@{ i } -> ブール型@{ i } -> ブール型@{ i }
    :=
        fun x : ブール型@{ i } =>
        ブール型.場合分け
            x
            ( ブール型@{ i } -> ブール型@{ i } )
            (
                fun y : ブール型@{ i } =>
                ブール型.場合分け
                    y
                    ブール型@{ i }
                    偽@{ i }
                    偽@{ i }
            )
            (
                fun y : ブール型@{ i } =>
                ブール型.場合分け
                    y
                    ブール型@{ i }
                    偽@{ i }
                    真@{ i }
            )
.

Definition 論理積@{ i | } ( x : ブール型@{ i } ) ( y : ブール型@{ i } ) : ブール型@{ i } := A_2024_07_21_0030@{ i } x y .

End A_2024_08_30_0003 .

(** * ゼロから始まる自然数に関する定義 *)

(** ゼロから始まる自然数に関するモジュールを定義します。 *)

Module A_2024_08_30_0006 .

(** ゼロから始まる自然数を定義します。 *)

Inductive A_2024_07_21_0031@{ i | } : Type@{ i }
    :=
        A_2024_07_21_0032 : A_2024_07_21_0031
        |
        A_2024_07_21_0033 : A_2024_07_21_0031 -> A_2024_07_21_0031
.

Definition 自然数@{ i | } : Type@{ i } := A_2024_07_21_0031@{ i } .

Module A_2024_07_21_0031 .

Definition ゼロの場合の構築子@{ i | } : 自然数@{ i } := A_2024_07_21_0032@{ i } .

Definition 後者の場合の構築子@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0033@{ i } x .

(** 自然数について場合分けします。 *)

Definition A_2024_08_30_0007@{ i | }
    : 自然数@{ i } -> forall 目標 : Type@{ i } , 目標 -> ( 自然数@{ i } -> 目標 ) -> 目標
    :=
        fun 対象 : 自然数@{ i } =>
        fun 目標 : Type@{ i } =>
        fun ゼロの場合の処理 : 目標 =>
        fun 後者の場合の処理 : 自然数@{ i } -> 目標 =>
        match
            対象
        with
            A_2024_07_21_0032 => ゼロの場合の処理
            |
            A_2024_07_21_0033 対象_前 => 後者の場合の処理 対象_前
        end
.

Definition 場合分け@{ i | }
    ( 対象 : 自然数@{ i } )
    ( 目標 : Type@{ i } )
    ( ゼロの場合の処理 : 目標 )
    ( 後者の場合の処理 : 自然数@{ i } -> 目標 )
    : 目標
    := A_2024_08_30_0007@{ i } 対象 目標 ゼロの場合の処理 後者の場合の処理
.

(** 自然数について依存型の場合分けをします。 *)

Definition A_2024_08_30_0008@{ i | }
    :
        forall 対象 : 自然数@{ i } ,
        forall 目標 : 自然数@{ i } -> Type@{ i } ,
        目標 ゼロの場合の構築子@{ i }
        ->
        ( forall 対象_前 : 自然数@{ i } , 目標 ( 後者の場合の構築子@{ i } 対象_前 ) )
        ->
        目標 対象
    :=
        fun 対象 : 自然数@{ i } =>
        fun 目標 : 自然数@{ i } -> Type@{ i } =>
        fun ゼロの場合の処理 : 目標 ゼロの場合の構築子@{ i } =>
        fun 後者の場合の処理 : forall 対象_前 : 自然数@{ i } , 目標 ( 後者の場合の構築子@{ i } 対象_前 ) =>
        match
            対象
        as
            対象_
        return
            目標 対象_
        with
            A_2024_07_21_0032 => ゼロの場合の処理
            |
            A_2024_07_21_0033 対象_前 => 後者の場合の処理 対象_前
        end
.

Definition 依存型の場合分け@{ i | }
    ( 対象 : 自然数@{ i } )
    ( 目標 : 自然数@{ i } -> Type@{ i } )
    ( ゼロの場合の処理 : 目標 ゼロの場合の構築子@{ i } )
    ( 後者の場合の処理 : forall 対象_前 : 自然数@{ i } , 目標 ( 後者の場合の構築子@{ i } 対象_前 ) )
    : 目標 対象
    := A_2024_08_30_0008@{ i } 対象 目標 ゼロの場合の処理 後者の場合の処理
.

(** 自然数について再帰します。 *)

Definition A_2024_08_30_0009@{ i | }
    : 自然数@{ i } -> forall 目標 : Type@{ i } , 目標 -> ( 自然数@{ i } -> 目標 -> 目標 ) -> 目標
    :=
        fun 対象 : 自然数@{ i } =>
        fun 目標 : Type@{ i } =>
        fun ゼロの場合の処理 : 目標 =>
        fun 後者の場合の処理 : 自然数@{ i } -> 目標 -> 目標 =>
        (
            fix a ( 対象_ : 自然数@{ i } ) { struct 対象_ } : 目標
                :=
                    場合分け@{ i }
                        対象_
                        目標
                        ゼロの場合の処理
                        ( fun 対象_前 : 自然数@{ i } => 後者の場合の処理 対象_前 ( a 対象_前 ) )
        )
            対象
.

Definition 再帰@{ i | }
    ( 対象 : 自然数@{ i } )
    ( 目標 : Type@{ i } )
    ( ゼロの場合の処理 : 目標 )
    ( 後者の場合の処理 : 自然数@{ i } -> 目標 -> 目標 )
    : 目標
    := A_2024_08_30_0009@{ i } 対象 目標 ゼロの場合の処理 後者の場合の処理
.

(** 自然数について依存型の再帰をします。 *)

Definition A_2024_08_30_0010@{ i | }
    :
        forall 対象 : 自然数@{ i } ,
        forall 目標 : 自然数@{ i } -> Type@{ i } ,
        目標 ゼロの場合の構築子@{ i }
        ->
        ( forall 対象_前 : 自然数@{ i } , 目標 対象_前 -> 目標 ( 後者の場合の構築子@{ i } 対象_前 ) )
        ->
        目標 対象
    :=
        fun 対象 : 自然数@{ i } =>
        fun 目標 : 自然数@{ i } -> Type@{ i } =>
        fun ゼロの場合の処理 : 目標 ゼロの場合の構築子@{ i } =>
        fun 後者の場合の処理 : forall 対象_前 : 自然数@{ i } , 目標 対象_前 -> 目標 ( 後者の場合の構築子@{ i } 対象_前 ) =>
        (
            fix a ( 対象_ : 自然数@{ i } ) { struct 対象_ } : 目標 対象_
                :=
                    依存型の場合分け@{ i }
                        対象_
                        目標
                        ゼロの場合の処理
                        ( fun 対象_前 : 自然数@{ i } => 後者の場合の処理 対象_前 ( a 対象_前 ) )
        )
            対象
.

Definition 依存型の再帰@{ i | }
    ( 対象 : 自然数@{ i } )
    ( 目標 : 自然数@{ i } -> Type@{ i } )
    ( ゼロの場合の処理 : 目標 ゼロの場合の構築子@{ i } )
    ( 後者の場合の処理 : forall 対象_前 : 自然数@{ i } , 目標 対象_前 -> 目標 ( 後者の場合の構築子@{ i } 対象_前 ) )
    : 目標 対象
    := A_2024_08_30_0010@{ i } 対象 目標 ゼロの場合の処理 後者の場合の処理
.

End A_2024_07_21_0031 .

Module 自然数 := A_2024_07_21_0031 .

(** ゼロです。 *)

Definition A_2024_08_30_0011@{ i | } : 自然数@{ i } := 自然数.ゼロの場合の構築子@{ i } .

Definition ゼロ@{ i | } : 自然数@{ i } := A_2024_08_30_0011@{ i } .

(** 後者関数です。 *)

Definition A_2024_08_30_0012@{ i | } : 自然数@{ i } -> 自然数@{ i } := 自然数.後者の場合の構築子@{ i } .

Definition 後者関数@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_08_30_0012@{ i } x .

(** 一です。 *)

Definition A_2024_07_21_0034@{ i | } : 自然数@{ i } := 後者関数@{ i } ゼロ@{ i } .

Definition 一@{ i } : 自然数@{ i } := A_2024_07_21_0034@{ i } .

(** 二です。 *)

Definition A_2024_07_21_0035@{ i | } : 自然数@{ i } := 後者関数@{ i } 一@{ i } .

Definition 二@{ i } : 自然数@{ i } := A_2024_07_21_0035@{ i } .

(** 三です。 *)

Definition A_2024_07_21_0036@{ i | } : 自然数@{ i } := 後者関数@{ i } 二@{ i } .

Definition 三@{ i } : 自然数@{ i } := A_2024_07_21_0036@{ i } .

(** 四です。 *)

Definition A_2024_07_21_0037@{ i | } : 自然数@{ i } := 後者関数@{ i } 三@{ i } .

Definition 四@{ i } : 自然数@{ i } := A_2024_07_21_0037@{ i } .

(** 五です。 *)

Definition A_2024_07_21_0038@{ i | } : 自然数@{ i } := 後者関数@{ i } 四@{ i } .

Definition 五@{ i } : 自然数@{ i } := A_2024_07_21_0038@{ i } .

(** 六です。 *)

Definition A_2024_07_21_0039@{ i | } : 自然数@{ i } := 後者関数@{ i } 五@{ i } .

Definition 六@{ i } : 自然数@{ i } := A_2024_07_21_0039@{ i } .

(** 七です。 *)

Definition A_2024_07_21_0040@{ i | } : 自然数@{ i } := 後者関数@{ i } 六@{ i } .

Definition 七@{ i } : 自然数@{ i } := A_2024_07_21_0040@{ i } .

(** 八です。 *)

Definition A_2024_07_21_0041@{ i | } : 自然数@{ i } := 後者関数@{ i } 七@{ i } .

Definition 八@{ i } : 自然数@{ i } := A_2024_07_21_0041@{ i } .

(** 九です。 *)

Definition A_2024_07_21_0042@{ i | } : 自然数@{ i } := 後者関数@{ i } 八@{ i } .

Definition 九@{ i } : 自然数@{ i } := A_2024_07_21_0042@{ i } .

(** 十です。 *)

Definition A_2024_07_21_0043@{ i | } : 自然数@{ i } := 後者関数@{ i } 九@{ i } .

Definition 十@{ i } : 自然数@{ i } := A_2024_07_21_0043@{ i } .

(** 一を足します。 *)

Definition A_2024_08_30_0014@{ i | } : 自然数@{ i } -> 自然数@{ i } := 後者関数@{ i } .

Definition 一を足す@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_08_30_0014@{ i } x .

(** 二を足します。 *)

Definition A_2024_07_21_0044@{ i | } : 自然数@{ i } -> 自然数@{ i } := fun x : 自然数@{ i } => 後者関数@{ i } ( 一を足す@{ i } x ) .

Definition 二を足す@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0044@{ i } x .

(** 三を足します。 *)

Definition A_2024_07_21_0045@{ i | } : 自然数@{ i } -> 自然数@{ i } := fun x : 自然数@{ i } => 後者関数@{ i } ( 二を足す@{ i } x ) .

Definition 三を足す@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0045@{ i } x .

(** 四を足します。 *)

Definition A_2024_07_21_0046@{ i | } : 自然数@{ i } -> 自然数@{ i } := fun x : 自然数@{ i } => 後者関数@{ i } ( 三を足す@{ i } x ) .

Definition 四を足す@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0046@{ i } x .

(** 五を足します。 *)

Definition A_2024_07_21_0047@{ i | } : 自然数@{ i } -> 自然数@{ i } := fun x : 自然数@{ i } => 後者関数@{ i } ( 四を足す@{ i } x ) .

Definition 五を足す@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0047@{ i } x .

(** 六を足します。 *)

Definition A_2024_07_21_0048@{ i | } : 自然数@{ i } -> 自然数@{ i } := fun x : 自然数@{ i } => 後者関数@{ i } ( 五を足す@{ i } x ) .

Definition 六を足す@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0048@{ i } x .

(** 七を足します。 *)

Definition A_2024_07_21_0049@{ i | } : 自然数@{ i } -> 自然数@{ i } := fun x : 自然数@{ i } => 後者関数@{ i } ( 六を足す@{ i } x ) .

Definition 七を足す@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0049@{ i } x .

(** 八を足します。 *)

Definition A_2024_07_21_0050@{ i | } : 自然数@{ i } -> 自然数@{ i } := fun x : 自然数@{ i } => 後者関数@{ i } ( 七を足す@{ i } x ) .

Definition 八を足す@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0050@{ i } x .

(** 九を足します。 *)

Definition A_2024_07_21_0051@{ i | } : 自然数@{ i } -> 自然数@{ i } := fun x : 自然数@{ i } => 後者関数@{ i } ( 八を足す@{ i } x ) .

Definition 九を足す@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0051@{ i } x .

(** 十を足します。 *)

Definition A_2024_07_21_0052@{ i | } : 自然数@{ i } -> 自然数@{ i } := fun x : 自然数@{ i } => 後者関数@{ i } ( 九を足す@{ i } x ) .

Definition 十を足す@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0052@{ i } x .

(** 足します。 *)

Definition A_2024_07_21_0053@{ i | } : 自然数@{ i } -> 自然数@{ i } -> 自然数@{ i }
    :=
        fun x : 自然数@{ i } =>
        自然数.再帰@{ i }
            x
            ( 自然数@{ i } -> 自然数@{ i } )
            (
                fun y : 自然数@{ i } =>
                自然数.場合分け@{ i }
                    y
                    自然数@{ i }
                    ゼロ@{ i }
                    ( fun y_前 : 自然数@{ i } => 後者関数@{ i } y_前 )
            )
            (
                fun x_前 : 自然数@{ i } =>
                fun a_前 : 自然数@{ i } -> 自然数@{ i } =>
                fun y : 自然数@{ i } =>
                自然数.場合分け@{ i }
                    y
                    自然数@{ i }
                    ( 後者関数@{ i } x_前 )
                    ( fun y_前 : 自然数@{ i } => 後者関数@{ i } ( 後者関数@{ i } ( a_前 y_前 ) ) )
            )
.

Definition 足す@{ i | } ( x : 自然数@{ i } ) ( y : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0053@{ i } x y .

(** 掛けます。 *)

Definition A_2024_07_21_0054@{ i | } : 自然数@{ i } -> 自然数@{ i } -> 自然数@{ i }
    :=
        fun x : 自然数@{ i } =>
        fun y : 自然数@{ i } =>
        自然数.再帰@{ i }
            y
            自然数@{ i }
            ゼロ@{ i }
            ( fun y_前 : 自然数@{ i } => fun a_前 : 自然数@{ i } => 足す@{ i } x a_前 )
.

Definition 掛ける@{ i | } ( x : 自然数@{ i } ) ( y : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0054@{ i } x y .

(** 冪乗です。 *)

Definition A_2024_07_21_0055@{ i | } : 自然数@{ i } -> 自然数@{ i } -> 自然数@{ i }
    :=
        fun x : 自然数@{ i } =>
        fun y : 自然数@{ i } =>
        自然数.再帰@{ i }
            y
            自然数@{ i }
            一@{ i }
            ( fun y_前 : 自然数@{ i } => fun a_前 : 自然数@{ i } => 掛ける@{ i } x a_前 )
.

Definition 冪乗@{ i | } ( x : 自然数@{ i } ) ( y : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0055@{ i } x y .

(** 超冪です。 *)

Definition A_2024_07_21_0060@{ i | } : 自然数@{ i } -> 自然数@{ i } -> 自然数@{ i }
    :=
        fun x : 自然数@{ i } =>
        fun y : 自然数@{ i } =>
        自然数.再帰@{ i }
            y
            自然数@{ i }
            一@{ i }
            ( fun y_前 : 自然数@{ i } => fun a_前 : 自然数@{ i } => 冪乗@{ i } x a_前 )
.

Definition 超冪@{ i | } ( x : 自然数@{ i } ) ( y : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0060@{ i } x y .

(** 最小値です。 *)

Definition A_2024_07_21_0056@{ i | } : 自然数@{ i } -> 自然数@{ i } -> 自然数@{ i }
    :=
        fun x : 自然数@{ i } =>
        自然数.再帰@{ i }
            x
            ( 自然数@{ i } -> 自然数@{ i } )
            (
                fun y : 自然数@{ i } =>
                自然数.場合分け@{ i }
                    y
                    自然数@{ i }
                    ゼロ@{ i }
                    ( fun y_前 : 自然数@{ i } => ゼロ@{ i } )
            )
            (
                fun x_前 : 自然数@{ i } =>
                fun a_前 : 自然数@{ i } -> 自然数@{ i } =>
                fun y : 自然数@{ i } =>
                自然数.場合分け@{ i }
                    y
                    自然数@{ i }
                    ゼロ@{ i }
                    ( fun y_前 : 自然数@{ i } => 後者関数@{ i } ( a_前 y_前 ) )
            )
.

Definition 最小値を計算する@{ i | } ( x : 自然数@{ i } ) ( y : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0056@{ i } x y .

(** 最大値です。 *)

Definition A_2024_07_21_0057@{ i | } : 自然数@{ i } -> 自然数@{ i } -> 自然数@{ i }
    :=
        fun x : 自然数@{ i } =>
        自然数.再帰@{ i }
            x
            ( 自然数@{ i } -> 自然数@{ i } )
            (
                fun y : 自然数@{ i } =>
                自然数.場合分け@{ i }
                    y
                    自然数@{ i }
                    ゼロ@{ i }
                    ( fun y_前 : 自然数@{ i } => 後者関数@{ i } y_前 )
            )
            (
                fun x_前 : 自然数@{ i } =>
                fun a_前 : 自然数@{ i } -> 自然数@{ i } =>
                fun y : 自然数@{ i } =>
                自然数.場合分け@{ i }
                    y
                    自然数@{ i }
                    ( 後者関数@{ i } x_前 )
                    ( fun y_前 : 自然数@{ i } => 後者関数@{ i } ( a_前 y_前 ) )
            )
.

Definition 最大値を計算する@{ i | } ( x : 自然数@{ i } ) ( y : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0057@{ i } x y .

(** 三角数です。 *)

Definition A_2024_07_21_0058@{ i | } : 自然数@{ i } -> 自然数@{ i }
    :=
        fun x : 自然数@{ i } =>
        自然数.再帰@{ i }
            x
            自然数@{ i }
            ゼロ@{ i }
            ( fun x_前 : 自然数@{ i } => fun a_前 : 自然数@{ i } => 足す@{ i } ( 後者関数@{ i } x_前 ) a_前 )
.

Definition 三角数を計算する@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0058@{ i } x .

(** 階乗です。 *)

Definition A_2024_07_21_0059@{ i | } : 自然数@{ i } -> 自然数@{ i }
    :=
        fun x : 自然数@{ i } =>
        自然数.再帰@{ i }
            x
            自然数@{ i }
            一@{ i }
            ( fun x_前 : 自然数@{ i } => fun a_前 : 自然数@{ i } => 掛ける@{ i } ( 後者関数@{ i } x_前 ) a_前 )
.

Definition 階乗@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0059@{ i } x .

(** 二項係数です。 *)

Definition A_2024_07_21_0061@{ i | } : 自然数@{ i } -> 自然数@{ i } -> 自然数@{ i }
    :=
        fun x : 自然数@{ i } =>
        自然数.再帰@{ i }
            x
            ( 自然数@{ i } -> 自然数@{ i } )
            (
                fun y : 自然数@{ i } =>
                自然数.場合分け@{ i }
                    y
                    自然数@{ i }
                    一@{ i }
                    ( fun y_前 : 自然数@{ i } => ゼロ@{ i } )
            )
            (
                fun x_前 : 自然数@{ i } =>
                fun a_前 : 自然数@{ i } -> 自然数@{ i } =>
                fun y : 自然数@{ i } =>
                自然数.場合分け@{ i }
                    y
                    自然数@{ i }
                    一@{ i }
                    ( fun y_前 : 自然数@{ i } => 足す@{ i } ( a_前 ( 後者関数@{ i } y_前 ) ) ( a_前 y_前 ) )
            )
.

Definition 二項係数@{ i | } ( x : 自然数@{ i } ) ( y : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0061 x y .

(** フィボナッチ数列です。 *)

Definition A_2024_07_21_0062@{ i | } : 自然数@{ i } -> 自然数@{ i }
    :=
        fun x : 自然数@{ i } =>
        (
            自然数.再帰@{ i }
                x
                ( 自然数@{ i } -> 自然数@{ i } -> 自然数@{ i } )
                ( fun y : 自然数@{ i } => fun z : 自然数@{ i } => y )
                (
                    fun x_前 : 自然数@{ i } =>
                    fun a_前 : 自然数@{ i } -> 自然数@{ i } -> 自然数@{ i } =>
                    fun y : 自然数@{ i } =>
                    fun z : 自然数@{ i } =>
                    a_前 z ( 足す@{ i } y z )
                )
        )
            ゼロ@{ i }
            一@{ i }
.

Definition フィボナッチ数列を計算する@{ i | } ( x : 自然数@{ i } ) : 自然数@{ i } := A_2024_07_21_0062@{ i } x .

(** 二で割ります。 *)

Definition A_2024_08_02_0003@{ i | } : 自然数@{ i } -> 自然数@{ i }
    :=
        fun x : 自然数@{ i } =>
        (
            自然数.再帰@{ i }
                x
                ( 自然数@{ i } -> 自然数@{ i } -> 自然数@{ i } )
                ( fun y : 自然数@{ i } => fun z : 自然数@{ i } => y )
                (
                    fun x_前 : 自然数@{ i } =>
                    fun a_前 : 自然数@{ i } -> 自然数@{ i } -> 自然数@{ i } =>
                    fun y : 自然数@{ i } =>
                    fun z : 自然数@{ i } =>
                    a_前 z ( 後者関数@{ i } y )
                )
        )
            ゼロ@{ i }
            ゼロ@{ i }
.

End A_2024_08_30_0006 .

(** * 一から始まる自然数に関する定義 *)

(** 一から始まる自然数に関するモジュールを定義します。 *)

Module A_2024_09_02_0000 .

(** 一から始まる自然数を定義します。 *)

Inductive A_2024_07_21_0063@{ i | } : Type@{ i }
    :=
        A_2024_07_21_0064 : A_2024_07_21_0063
        |
        A_2024_07_21_0065 : A_2024_07_21_0063 -> A_2024_07_21_0063
.

Definition 正の自然数@{ i | } : Type@{ i } := A_2024_07_21_0063@{ i } .

Module A_2024_07_21_0063 .

Definition 一の場合の構築子@{ i | } : 正の自然数@{ i } := A_2024_07_21_0064@{ i } .

Definition 後者の場合の構築子@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_21_0065@{ i } x .

(** 正の自然数について場合分けします。 *)

Definition A_2024_09_02_0001@{ i | }
    : 正の自然数@{ i } -> forall 目標 : Type@{ i } , 目標 -> ( 正の自然数@{ i } -> 目標 ) -> 目標
    :=
        fun 対象 : 正の自然数@{ i } =>
        fun 目標 : Type@{ i } =>
        fun 一の場合の処理 : 目標 =>
        fun 後者の場合の処理 : 正の自然数@{ i } -> 目標 =>
        match
            対象
        with
            A_2024_07_21_0064 => 一の場合の処理
            |
            A_2024_07_21_0065 対象_前 => 後者の場合の処理 対象_前
        end
.

Definition 場合分け@{ i | }
    ( 対象 : 正の自然数@{ i } )
    ( 目標 : Type@{ i } )
    ( 一の場合の処理 : 目標 )
    ( 後者の場合の処理 : 正の自然数@{ i } -> 目標 )
    : 目標
    := A_2024_09_02_0001@{ i } 対象 目標 一の場合の処理 後者の場合の処理
.

(** 正の自然数について依存型の場合分けをします。 *)

Definition A_2024_09_02_0002@{ i | }
    :
        forall 対象 : 正の自然数@{ i } ,
        forall 目標 : 正の自然数@{ i } -> Type@{ i } ,
        目標 一の場合の構築子@{ i }
        ->
        ( forall 対象_前 : 正の自然数@{ i } , 目標 ( 後者の場合の構築子@{ i } 対象_前 ) )
        ->
        目標 対象
    :=
        fun 対象 : 正の自然数@{ i } =>
        fun 目標 : 正の自然数@{ i } -> Type@{ i } =>
        fun 一の場合の処理 : 目標 一の場合の構築子@{ i } =>
        fun 後者の場合の処理 : forall 対象_前 : 正の自然数@{ i } , 目標 ( 後者の場合の構築子@{ i } 対象_前 ) =>
        match
            対象
        as
            対象_
        return
            目標 対象_
        with
            A_2024_07_21_0064 => 一の場合の処理
            |
            A_2024_07_21_0065 対象_前 => 後者の場合の処理 対象_前
        end
.

Definition 依存型の場合分け@{ i | }
    ( 対象 : 正の自然数@{ i } )
    ( 目標 : 正の自然数@{ i } -> Type@{ i } )
    ( 一の場合の処理 : 目標 一の場合の構築子@{ i } )
    ( 後者の場合の処理 : forall 対象_前 : 正の自然数@{ i } , 目標 ( 後者の場合の構築子@{ i } 対象_前 ) )
    : 目標 対象
    := A_2024_09_02_0002@{ i } 対象 目標 一の場合の処理 後者の場合の処理
.

(** 正の自然数について再帰します。 *)

Definition A_2024_09_02_0003@{ i | }
    :
        正の自然数@{ i }
        ->
        forall 目標 : Type@{ i } ,
        目標
        ->
        ( 正の自然数@{ i } -> 目標 -> 目標 )
        ->
        目標
    :=
        fun 対象 : 正の自然数@{ i } =>
        fun 目標 : Type@{ i } =>
        fun 一の場合の処理 : 目標 =>
        fun 後者の場合の処理 : 正の自然数@{ i } -> 目標 -> 目標 =>
        (
            fix a ( 対象_ : 正の自然数@{ i } ) { struct 対象_ } : 目標
                :=
                    場合分け@{ i }
                        対象_
                        目標
                        一の場合の処理
                        ( fun 対象_前 : 正の自然数@{ i } => 後者の場合の処理 対象_前 ( a 対象_前 ) )
        )
            対象
.

Definition 再帰@{ i | }
    ( 対象 : 正の自然数@{ i } )
    ( 目標 : Type@{ i } )
    ( 一の場合の処理 : 目標 )
    ( 後者の場合の処理 : 正の自然数@{ i } -> 目標 -> 目標 )
    : 目標
    := A_2024_09_02_0003@{ i } 対象 目標 一の場合の処理 後者の場合の処理
.

(** 正の自然数について依存型の再帰をします。 *)

Definition A_2024_09_02_0004@{ i | }
    :
        forall 対象 : 正の自然数@{ i } ,
        forall 目標 : 正の自然数@{ i } -> Type@{ i } ,
        目標 一の場合の構築子@{ i }
        ->
        ( forall 対象_前 : 正の自然数@{ i } , 目標 対象_前 -> 目標 ( 後者の場合の構築子@{ i } 対象_前 ) )
        ->
        目標 対象
    :=
        fun 対象 : 正の自然数@{ i } =>
        fun 目標 : 正の自然数@{ i } -> Type@{ i } =>
        fun 一の場合の処理 : 目標 一の場合の構築子@{ i } =>
        fun 後者の場合の処理 : forall 対象_前 : 正の自然数@{ i } , 目標 対象_前 -> 目標 ( 後者の場合の構築子@{ i } 対象_前 ) =>
        (
            fix a ( 対象_ : 正の自然数@{ i } ) { struct 対象_ } : 目標 対象_
                :=
                    依存型の場合分け@{ i }
                        対象_
                        目標
                        一の場合の処理
                        ( fun 対象_前 : 正の自然数@{ i } => 後者の場合の処理 対象_前 ( a 対象_前 ) )
        )
            対象
.

Definition 依存型の再帰@{ i | }
    ( 対象 : 正の自然数@{ i } )
    ( 目標 : 正の自然数@{ i } -> Type@{ i } )
    ( 一の場合の処理 : 目標 一の場合の構築子@{ i } )
    ( 後者の場合の処理 : forall 対象_前 : 正の自然数@{ i } , 目標 対象_前 -> 目標 ( 後者の場合の構築子@{ i } 対象_前 ) )
    : 目標 対象
    := A_2024_09_02_0004@{ i } 対象 目標 一の場合の処理 後者の場合の処理
.

End A_2024_07_21_0063 .

Module 正の自然数 := A_2024_07_21_0063 .

(** 一です。 *)

Definition A_2024_09_02_0005@{ i | } : 正の自然数@{ i } := 正の自然数.一の場合の構築子@{ i } .

Definition 一@{ i | } : 正の自然数@{ i } := A_2024_09_02_0005@{ i } .

(** 後者関数です。 *)

Definition A_2024_09_02_0006@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i } := 正の自然数.後者の場合の構築子@{ i } .

Definition 後者関数@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_09_02_0006@{ i } x .

(** 二です。 *)

Definition A_2024_07_21_0066@{ i | } : 正の自然数@{ i } := 後者関数@{ i } 一@{ i } .

Definition 二@{ i | } : 正の自然数@{ i } := A_2024_07_21_0066@{ i } .

(** 三です。 *)

Definition A_2024_07_21_0067@{ i | } : 正の自然数@{ i } := 後者関数@{ i } 二@{ i } .

Definition 三@{ i | } : 正の自然数@{ i } := A_2024_07_21_0067@{ i } .

(** 四です。 *)

Definition A_2024_07_21_0068@{ i | } : 正の自然数@{ i } := 後者関数@{ i } 三@{ i } .

Definition 四@{ i | } : 正の自然数@{ i } := A_2024_07_21_0068@{ i } .

(** 五です。 *)

Definition A_2024_07_21_0069@{ i | } : 正の自然数@{ i } := 後者関数@{ i } 四@{ i } .

Definition 五@{ i | } : 正の自然数@{ i } := A_2024_07_21_0069@{ i } .

(** 六です。 *)

Definition A_2024_07_21_0070@{ i | } : 正の自然数@{ i } := 後者関数@{ i } 五@{ i } .

Definition 六@{ i | } : 正の自然数@{ i } := A_2024_07_21_0070@{ i } .

(** 七です。 *)

Definition A_2024_07_21_0071@{ i | } : 正の自然数@{ i } := 後者関数@{ i } 六@{ i } .

Definition 七@{ i | } : 正の自然数@{ i } := A_2024_07_21_0071@{ i } .

(** 八です。 *)

Definition A_2024_07_21_0072@{ i | } : 正の自然数@{ i } := 後者関数@{ i } 七@{ i } .

Definition 八@{ i | } : 正の自然数@{ i } := A_2024_07_21_0072@{ i } .

(** 九です。 *)

Definition A_2024_07_21_0073@{ i | } : 正の自然数@{ i } := 後者関数@{ i } 八@{ i } .

Definition 九@{ i | } : 正の自然数@{ i } := A_2024_07_21_0073@{ i } .

(** 十です。 *)

Definition A_2024_07_21_0074@{ i | } : 正の自然数@{ i } := 後者関数@{ i } 九@{ i } .

Definition 十@{ i | } : 正の自然数@{ i } := A_2024_07_21_0074@{ i } .

(** 一を足します。 *)

Definition A_2024_08_03_0000@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i } := 後者関数@{ i } .

Definition 一を足す@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_08_03_0000@{ i } x .

(** 二を足します。 *)

Definition A_2024_07_21_0075@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i }
    := fun x : 正の自然数@{ i } => 後者関数@{ i } ( 一を足す@{ i } x )
.

Definition 二を足す@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_21_0075@{ i } x .

(** 三を足します。 *)

Definition A_2024_07_21_0076@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i }
    := fun x : 正の自然数@{ i } => 後者関数@{ i } ( 二を足す@{ i } x )
.

Definition 三を足す@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_21_0076@{ i } x .

(** 四を足します。 *)

Definition A_2024_07_21_0077@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i }
    := fun x : 正の自然数@{ i } => 後者関数@{ i } ( 三を足す@{ i } x )
.

Definition 四を足す@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_21_0077@{ i } x .

(** 五を足します。 *)

Definition A_2024_07_21_0078@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i }
    := fun x : 正の自然数@{ i } => 後者関数@{ i } ( 四を足す@{ i } x )
.

Definition 五を足す@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_21_0078@{ i } x .

(** 六を足します。 *)

Definition A_2024_07_21_0079@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i }
    := fun x : 正の自然数@{ i } => 後者関数@{ i } ( 五を足す@{ i } x )
.

Definition 六を足す@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_21_0079@{ i } x .

(** 七を足します。 *)

Definition A_2024_07_21_0080@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i }
    := fun x : 正の自然数@{ i } => 後者関数@{ i } ( 六を足す@{ i } x )
.

Definition 七を足す@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_21_0080@{ i } x .

(** 八を足します。 *)

Definition A_2024_07_21_0081@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i }
    := fun x : 正の自然数@{ i } => 後者関数@{ i } ( 七を足す@{ i } x )
.

Definition 八を足す@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_21_0081@{ i } x .

(** 九を足します。 *)

Definition A_2024_07_21_0082@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i }
    := fun x : 正の自然数@{ i } => 後者関数@{ i } ( 八を足す@{ i } x )
.

Definition 九を足す@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_21_0082@{ i } x .

(** 十を足します。 *)

Definition A_2024_07_21_0083@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i }
    := fun x : 正の自然数@{ i } => 後者関数@{ i } ( 九を足す@{ i } x )
.

Definition 十を足す@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_21_0083@{ i } x .

(** 足します。 *)

Definition A_2024_07_22_0000@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i } -> 正の自然数@{ i }
    :=
        fun x : 正の自然数@{ i } =>
        正の自然数.再帰@{ i }
            x
            ( 正の自然数@{ i } -> 正の自然数@{ i } )
            (
                fun y : 正の自然数@{ i } =>
                正の自然数.場合分け@{ i }
                    y
                    正の自然数@{ i }
                    二@{ i }
                    ( fun y_前 : 正の自然数@{ i } => 後者関数@{ i } ( 後者関数@{ i } y_前 ) )
            )
            (
                fun x_前 : 正の自然数@{ i } =>
                fun a_前 : 正の自然数@{ i } -> 正の自然数@{ i } =>
                fun y : 正の自然数@{ i } =>
                正の自然数.場合分け@{ i }
                    y
                    正の自然数@{ i }
                    ( 後者関数@{ i } ( 後者関数@{ i } x_前 ) )
                    ( fun y_前 : 正の自然数@{ i } => 後者関数@{ i } ( 後者関数@{ i } ( a_前 y_前 ) ) )
            )
.

Definition 足す@{ i | } ( x : 正の自然数@{ i } ) ( y : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_22_0000@{ i } x y .

(** 掛けます。 *)

Definition A_2024_07_22_0001@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i } -> 正の自然数@{ i }
    :=
        fun x : 正の自然数@{ i } =>
        fun y : 正の自然数@{ i } =>
        正の自然数.再帰@{ i }
            y
            正の自然数@{ i }
            x
            ( fun y_前 : 正の自然数@{ i } => fun a_前 : 正の自然数@{ i } => 足す@{ i } x a_前 )
.

Definition 掛ける@{ i | } ( x : 正の自然数@{ i } ) ( y : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_22_0001@{ i } x y .

(** 冪乗です。 *)

Definition A_2024_07_22_0002@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i } -> 正の自然数@{ i }
    :=
        fun x : 正の自然数@{ i } =>
        fun y : 正の自然数@{ i } =>
        正の自然数.再帰@{ i }
            y
            正の自然数@{ i }
            x
            ( fun y_前 : 正の自然数@{ i } => fun a_前 : 正の自然数@{ i } => A_2024_07_22_0001@{ i } x a_前 )
.

Definition 冪乗@{ i | } ( x : 正の自然数@{ i } ) ( y : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_22_0002@{ i } x y .

(** テトレーションです。 *)

Definition A_2024_07_22_0003@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i } -> 正の自然数@{ i }
    :=
        fun x : 正の自然数@{ i } =>
        fun y : 正の自然数@{ i } =>
        正の自然数.再帰@{ i }
            y
            正の自然数@{ i }
            x
            ( fun y_前 : 正の自然数@{ i } => fun a_前 : 正の自然数@{ i } => A_2024_07_22_0002@{ i } x a_前 )
.

Definition テトレーション@{ i | } ( x : 正の自然数@{ i } ) ( y : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_22_0003@{ i } x y .

(** 最小値です。 *)

Definition A_2024_07_22_0004@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i } -> 正の自然数@{ i }
    :=
        fun x : 正の自然数@{ i } =>
        正の自然数.再帰@{ i }
            x
            ( 正の自然数@{ i } -> 正の自然数@{ i } )
            (
                fun y : 正の自然数@{ i } =>
                正の自然数.場合分け@{ i }
                    y
                    正の自然数@{ i }
                    一@{ i }
                    ( fun y_前 : 正の自然数@{ i } => 一@{ i } )
            )
            (
                fun x_前 : 正の自然数@{ i } =>
                fun a_前 : 正の自然数@{ i } -> 正の自然数@{ i } =>
                fun y : 正の自然数@{ i } =>
                正の自然数.場合分け@{ i }
                    y
                    正の自然数@{ i }
                    ( 一@{ i } )
                    ( fun y_前 : 正の自然数@{ i } => 後者関数@{ i } ( a_前 y_前 ) )
            )
.

Definition 最小値を計算する@{ i | } ( x : 正の自然数@{ i } ) ( y : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_22_0004@{ i } x y .

(** 最大値です。 *)

Definition A_2024_07_22_0005@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i } -> 正の自然数@{ i }
    :=
        fun x : 正の自然数@{ i } =>
        正の自然数.再帰@{ i }
            x
            ( 正の自然数@{ i } -> 正の自然数@{ i } )
            (
                fun y : 正の自然数@{ i } =>
                正の自然数.場合分け@{ i }
                    y
                    正の自然数@{ i }
                    一@{ i }
                    ( fun y_前 : 正の自然数@{ i } => 後者関数@{ i } y_前 )
            )
            (
                fun x_前 : 正の自然数@{ i } =>
                fun a_前 : 正の自然数@{ i } -> 正の自然数@{ i } =>
                fun y : 正の自然数@{ i } =>
                正の自然数.場合分け@{ i }
                    y
                    正の自然数@{ i }
                    ( 後者関数@{ i } x_前 )
                    ( fun y_前 : 正の自然数@{ i } => 後者関数@{ i } ( a_前 y_前 ) )
            )
.

Definition 最大値を計算する@{ i | } ( x : 正の自然数@{ i } ) ( y : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_22_0005@{ i } x y .

(** 三角数です。 *)

Definition A_2024_07_22_0006@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i }
    :=
        fun x : 正の自然数@{ i } =>
        正の自然数.再帰@{ i }
            x
            正の自然数@{ i }
            一@{ i }
            ( fun x_前 : 正の自然数@{ i } => fun a_前 : 正の自然数@{ i } => 足す@{ i } ( 後者関数@{ i } x_前 ) a_前 )
.

Definition 三角数を計算する@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_22_0006@{ i } x .

(** 階乗です。 *)

Definition A_2024_07_22_0007@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i }
    :=
        fun x : 正の自然数@{ i } =>
        正の自然数.再帰@{ i }
            x
            正の自然数@{ i }
            一@{ i }
            ( fun x_前 : 正の自然数@{ i } => fun a_前 : 正の自然数@{ i } => 掛ける@{ i } ( 後者関数@{ i } x_前 ) a_前 )
.

Definition 階乗を計算する@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_22_0007@{ i } x .

(** フィボナッチ数列です。 *)

Definition A_2024_07_22_0008@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i }
    :=
        fun x : 正の自然数@{ i } =>
        (
            正の自然数.再帰@{ i }
                x
                ( 正の自然数@{ i } -> 正の自然数@{ i } -> 正の自然数@{ i } )
                ( fun y : 正の自然数@{ i } => fun z : 正の自然数@{ i } => y )
                (
                    fun x_前 : 正の自然数@{ i } =>
                    fun a_前 : 正の自然数@{ i } -> 正の自然数@{ i } -> 正の自然数@{ i } =>
                    fun y : 正の自然数@{ i } =>
                    fun z : 正の自然数@{ i } =>
                    a_前 z ( 足す@{ i } y z )
                )
        )
            一@{ i }
            一@{ i }
.

Definition フィボナッチ数列を計算する@{ i | } ( x : 正の自然数@{ i } ) : 正の自然数@{ i } := A_2024_07_22_0008@{ i } x .

End A_2024_09_02_0000 .

Module 正の自然数 := A_2024_09_02_0000 .

(** * 整数に関する定義 *)

(** 整数に関するモジュールを定義します。 *)

Module A_2024_09_03_0000 .

(** << A_2024_09_02_0000 >> を取り込みます。 *)

Import A_2024_09_02_0000 .

(** 整数を定義します。 *)

Inductive A_2024_07_22_0016@{ i | } : Type@{ i }
    :=
        A_2024_07_22_0017 : 正の自然数@{ i } -> A_2024_07_22_0016
        |
        A_2024_07_22_0018 : A_2024_07_22_0016
        |
        A_2024_07_22_0019 : 正の自然数@{ i } -> A_2024_07_22_0016
.

Definition 整数@{ i | } : Type@{ i } := A_2024_07_22_0016@{ i } .

Module A_2024_07_22_0016 .

Definition 負の場合の構築子@{ i | } ( x : 正の自然数@{ i } ) : 整数@{ i } := A_2024_07_22_0017@{ i } x .

Definition ゼロの場合の構築子@{ i | } : 整数@{ i } := A_2024_07_22_0018@{ i } .

Definition 正の場合の構築子@{ i | } ( x : 正の自然数@{ i } ) : 整数@{ i } := A_2024_07_22_0019@{ i } x .

(** 整数について場合分けします。 *)

Definition A_2024_09_03_0001@{ i | }
    : 整数@{ i } -> forall 目標 : Type@{ i } , ( 正の自然数@{ i } -> 目標 ) -> 目標 -> ( 正の自然数@{ i } -> 目標 ) -> 目標
    :=
        fun 対象 : 整数@{ i } =>
        fun 目標 : Type@{ i } =>
        fun 負の場合の処理 : 正の自然数@{ i } -> 目標 =>
        fun ゼロの場合の処理 : 目標 =>
        fun 正の場合の処理 : 正の自然数@{ i } -> 目標 =>
        match
            対象
        with
            A_2024_07_22_0017 対象_負 => 負の場合の処理 対象_負
            |
            A_2024_07_22_0018 => ゼロの場合の処理
            |
            A_2024_07_22_0019 対象_正 => 正の場合の処理 対象_正
        end
.

Definition 場合分け@{ i | }
    ( 対象 : 整数@{ i } )
    ( 目標 : Type@{ i } )
    ( 負の場合の処理 : 正の自然数@{ i } -> 目標 )
    ( ゼロの場合の処理 : 目標 )
    ( 正の場合の処理 : 正の自然数@{ i } -> 目標 )
    : 目標
    := A_2024_09_03_0001@{ i } 対象 目標 負の場合の処理 ゼロの場合の処理 正の場合の処理
.

(** 整数について依存型の場合分けをします。 *)

Definition A_2024_09_03_0002@{ i | }
    :
        forall 対象 : 整数@{ i } ,
        forall 目標 : 整数@{ i } -> Type@{ i } ,
        ( forall 対象_負 : 正の自然数@{ i } , 目標 ( 負の場合の構築子@{ i } 対象_負 ) )
        ->
        目標 ゼロの場合の構築子@{ i }
        ->
        ( forall 対象_正 : 正の自然数@{ i } , 目標 ( 正の場合の構築子@{ i } 対象_正 ) )
        ->
        目標 対象
    :=
        fun 対象 : 整数@{ i } =>
        fun 目標 : 整数@{ i } -> Type@{ i } =>
        fun 負の場合の処理 : forall 対象_負 : 正の自然数@{ i } , 目標 ( 負の場合の構築子@{ i } 対象_負 ) =>
        fun ゼロの場合の処理 : 目標 ゼロの場合の構築子@{ i } =>
        fun 正の場合の処理 : forall 対象_正 : 正の自然数@{ i } , 目標 ( 正の場合の構築子@{ i } 対象_正 ) =>
        match
            対象
        as
            対象_
        return
            目標 対象_
        with
            A_2024_07_22_0017 対象_負 => 負の場合の処理 対象_負
            |
            A_2024_07_22_0018 => ゼロの場合の処理
            |
            A_2024_07_22_0019 対象_正 => 正の場合の処理 対象_正
        end
.

Definition 依存型の場合分け@{ i | }
    ( 対象 : 整数@{ i } )
    ( 目標 : 整数@{ i } -> Type@{ i } )
    ( 負の場合の処理 : forall 対象_負 : 正の自然数@{ i } , 目標 ( 負の場合の構築子@{ i } 対象_負 ) )
    ( ゼロの場合の処理 : 目標 ゼロの場合の構築子@{ i } )
    ( 正の場合の処理 : forall 対象_正 : 正の自然数@{ i } , 目標 ( 正の場合の構築子@{ i } 対象_正 ) )
    : 目標 対象
    := A_2024_09_03_0002@{ i } 対象 目標 負の場合の処理 ゼロの場合の処理 正の場合の処理
.

End A_2024_07_22_0016 .

Module 整数 := A_2024_07_22_0016 .

(** 後者を計算します。 *)

Definition A_2024_07_22_0020@{ i | } : 整数@{ i } -> 整数@{ i }
    :=
        fun x : 整数@{ i } =>
        整数.場合分け@{ i }
            x
            整数@{ i }
            (
                fun x_負 : 正の自然数@{ i } =>
                正の自然数.場合分け@{ i }
                    x_負
                    整数@{ i }
                    整数.ゼロの場合の構築子@{ i }
                    ( fun x_負_前 : 正の自然数@{ i } => 整数.負の場合の構築子@{ i } x_負_前 )
            )
            ( 整数.正の場合の構築子@{ i } 一@{ i } )
            ( fun x_正 : 正の自然数@{ i } => 整数.正の場合の構築子@{ i } ( 正の自然数.後者関数@{ i } x_正 ) )
.

Definition 後者関数@{ i | } ( x : 整数@{ i } ) : 整数@{ i } := A_2024_07_22_0020@{ i } x .

(** 前者を計算します。 *)

Definition A_2024_07_22_0021@{ i | } : 整数@{ i } -> 整数@{ i }
    :=
        fun x : 整数@{ i } =>
        整数.場合分け@{ i }
            x
            整数@{ i }
            ( fun x_負 : 正の自然数@{ i } => 整数.負の場合の構築子@{ i } ( 正の自然数.後者関数@{ i } x_負 ) )
            ( 整数.負の場合の構築子@{ i } 一@{ i } )
            (
                fun x_正 : 正の自然数@{ i } =>
                正の自然数.場合分け@{ i }
                    x_正
                    整数@{ i }
                    整数.ゼロの場合の構築子@{ i }
                    ( fun x_正_前 : 正の自然数@{ i } => 整数.正の場合の構築子@{ i } x_正_前 )
            )
.

Definition 前者関数@{ i | } ( x : 整数@{ i } ) : 整数@{ i } := A_2024_07_22_0021@{ i } x .

(** [x - y] を計算する。 *)

Definition A_2024_07_22_0022@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i } -> 整数@{ i }
    :=
        fun x : 正の自然数@{ i } =>
        正の自然数.再帰@{ i }
            x
            ( 正の自然数@{ i } -> 整数@{ i } )
            (
                fun y : 正の自然数@{ i } =>
                正の自然数.場合分け@{ i }
                    y
                    整数@{ i }
                    整数.ゼロの場合の構築子@{ i }
                    ( fun y_前 : 正の自然数@{ i } => 整数.負の場合の構築子@{ i } y_前 )
            )
            (
                fun x_前 : 正の自然数@{ i } =>
                fun a_前 : 正の自然数@{ i } -> 整数@{ i } =>
                fun y : 正の自然数@{ i } =>
                正の自然数.場合分け@{ i }
                    y
                    整数@{ i }
                    ( 整数.正の場合の構築子@{ i } x_前 )
                    ( fun y_前 : 正の自然数@{ i } => a_前 y_前 )
            )
.

Definition 甲から乙を引く@{ i | } ( x : 正の自然数@{ i } ) ( y : 正の自然数@{ i } ) : 整数@{ i } := A_2024_07_22_0022@{ i } x y .

(** [y - x] を計算する。 *)

Definition A_2024_07_22_0023@{ i | } : 正の自然数@{ i } -> 正の自然数@{ i } -> 整数@{ i }
    :=
        fun x : 正の自然数@{ i } =>
        正の自然数.再帰@{ i }
            x
            ( 正の自然数@{ i } -> 整数@{ i } )
            (
                fun y : 正の自然数@{ i } =>
                正の自然数.場合分け@{ i }
                    y
                    整数@{ i }
                    整数.ゼロの場合の構築子@{ i }
                    ( fun y_前 : 正の自然数@{ i } => 整数.正の場合の構築子@{ i } y_前 )
            )
            (
                fun x_前 : 正の自然数@{ i } =>
                fun a_前 : 正の自然数@{ i } -> 整数@{ i } =>
                fun y : 正の自然数@{ i } =>
                正の自然数.場合分け@{ i }
                    y
                    整数@{ i }
                    ( 整数.負の場合の構築子@{ i } x_前 )
                    ( fun y_前 : 正の自然数@{ i } => a_前 y_前 )
            )
.

Definition 乙から甲を引く@{ i | } ( x : 正の自然数@{ i } ) ( y : 正の自然数@{ i } ) : 整数@{ i } := A_2024_07_22_0023@{ i } x y .

(** 足します。 *)

Definition A_2024_07_22_0024@{ i | } : 整数@{ i } -> 整数@{ i } -> 整数@{ i }
    :=
        fun x : 整数@{ i } =>
        整数.場合分け@{ i }
            x
            ( 整数@{ i } -> 整数@{ i } )
            (
                fun x_負 : 正の自然数@{ i } =>
                fun y : 整数@{ i } =>
                整数.場合分け@{ i }
                    y
                    整数@{ i }
                    ( fun y_負 : 正の自然数@{ i } => 整数.負の場合の構築子@{ i } ( 正の自然数.足す@{ i } x_負 y_負 ) )
                    ( 整数.負の場合の構築子@{ i } x_負 )
                    ( fun y_正 : 正の自然数@{ i } => 乙から甲を引く@{ i } x_負 y_正 )
            )
            (
                fun y : 整数@{ i } =>
                整数.場合分け@{ i }
                    y
                    整数@{ i }
                    ( fun y_負 : 正の自然数@{ i } => 整数.負の場合の構築子@{ i } y_負 )
                    整数.ゼロの場合の構築子@{ i }
                    ( fun y_正 : 正の自然数@{ i } => 整数.正の場合の構築子@{ i } y_正 )
            )
            (
                fun x_正 : 正の自然数@{ i } =>
                fun y : 整数@{ i } =>
                整数.場合分け@{ i }
                    y
                    整数@{ i }
                    ( fun y_負 : 正の自然数@{ i } => 甲から乙を引く@{ i } x_正 y_負 )
                    ( 整数.正の場合の構築子@{ i } x_正 )
                    ( fun y_正 : 正の自然数@{ i } => 整数.正の場合の構築子@{ i } ( 正の自然数.足す@{ i } x_正 y_正 ) )
            )
.

Definition 足す@{ i | } ( x : 整数@{ i } ) ( y : 整数@{ i } ) : 整数@{ i } := A_2024_07_22_0024@{ i } x y .

(** 符号を反転する。 *)

Definition A_2024_07_22_0025@{ i | } : 整数@{ i } -> 整数@{ i }
    :=
        fun x : 整数@{ i } =>
        整数.場合分け@{ i }
            x
            整数@{ i }
            ( fun x_負 : 正の自然数@{ i } => 整数.正の場合の構築子@{ i } x_負 )
            整数.ゼロの場合の構築子@{ i }
            ( fun x_正 : 正の自然数@{ i } => 整数.負の場合の構築子@{ i } x_正 )
.

Definition 符号を反転する@{ i | } ( x : 整数@{ i } ) : 整数@{ i } := A_2024_07_22_0025@{ i } x .

(** 掛ける。 *)

Definition A_2024_07_22_0026@{ i | } : 整数@{ i } -> 整数@{ i } -> 整数@{ i }
    :=
        fun x : 整数@{ i } =>
        整数.場合分け@{ i }
            x
            ( 整数@{ i } -> 整数@{ i } )
            (
                fun x_負 : 正の自然数@{ i } =>
                fun y : 整数@{ i } =>
                整数.場合分け@{ i }
                    y
                    整数@{ i }
                    ( fun y_負 : 正の自然数@{ i } => 整数.正の場合の構築子@{ i } ( 正の自然数.掛ける@{ i } x_負 y_負 ) )
                    整数.ゼロの場合の構築子
                    ( fun y_正 : 正の自然数@{ i } => 整数.負の場合の構築子@{ i } ( 正の自然数.掛ける@{ i } x_負 y_正 ) )
            )
            (
                fun y : 整数@{ i } =>
                整数.場合分け@{ i }
                    y
                    整数@{ i }
                    ( fun y_負 : 正の自然数@{ i } => 整数.ゼロの場合の構築子@{ i } )
                    整数.ゼロの場合の構築子@{ i }
                    ( fun y_正 : 正の自然数@{ i } => 整数.ゼロの場合の構築子@{ i } )
            )
            (
                fun x_正 : 正の自然数@{ i } =>
                fun y : 整数@{ i } =>
                整数.場合分け@{ i }
                    y
                    整数@{ i }
                    ( fun y_負 : 正の自然数@{ i } => 整数.負の場合の構築子@{ i } ( 正の自然数.掛ける@{ i } x_正 y_負 ) )
                    整数.ゼロの場合の構築子
                    ( fun y_正 : 正の自然数@{ i } => 整数.正の場合の構築子@{ i } ( 正の自然数.掛ける@{ i } x_正 y_正 ) )
            )
.

Definition 掛ける@{ i | } ( x : 整数@{ i } ) ( y : 整数@{ i } ) : 整数@{ i } := A_2024_07_22_0026@{ i } x y .

End A_2024_09_03_0000 .

(** * 列記型に関する定義 *)

(** 列記型に関するモジュールを定義します。 *)

Module A_2024_09_06_0000 .

(** << A_2024_08_30_0006 >> を取り込みます。 *)

Import A_2024_08_30_0006 .

(** 列記型です。「列記」は "list" の訳語です。 *)

Inductive A_2024_08_16_0000@{ i | } ( A : Type@{ i } ) : Type@{ i }
:=
    A_2024_08_16_0001 : A_2024_08_16_0000 A
    |
    A_2024_08_16_0002 : A -> A_2024_08_16_0000 A -> A_2024_08_16_0000 A
.

Definition 列記型@{ i | } ( A : Type@{ i } ) : Type@{ i } := A_2024_08_16_0000@{ i } A .

Module A_2024_08_16_0000 .

Definition 空の場合の構築子@{ i | } ( A : Type@{ i } ) : 列記型@{ i } A := A_2024_08_16_0001@{ i } A .

Definition 節の場合の構築子@{ i | } ( A : Type@{ i } ) ( x_1 : A ) ( x_2 : 列記型@{ i } A ) : 列記型@{ i } A
    := A_2024_08_16_0002@{ i } A x_1 x_2
.

(** 列記型について場合分けします。 *)

Definition A_2024_09_06_0001@{ i | }
    :
        forall A : Type@{ i } ,
        列記型@{ i } A
        ->
        forall 目標 : Type@{ i } ,
        目標
        ->
        ( A -> 列記型@{ i } A -> 目標 )
        ->
        目標
    :=
        fun A : Type@{ i } =>
        fun 対象 : 列記型@{ i } A =>
        fun 目標 : Type@{ i } =>
        fun 空の場合の処理 : 目標 =>
        fun 節の場合の処理 : A -> 列記型@{ i } A -> 目標 =>
        match
            対象
        with
            A_2024_08_16_0001 _ => 空の場合の処理
            |
            A_2024_08_16_0002 _ 対象_1 対象_2 => 節の場合の処理 対象_1 対象_2
        end
.

Definition 場合分け@{ i | }
    ( A : Type@{ i } )
    ( 対象 : 列記型@{ i } A )
    ( 目標 : Type@{ i } )
    ( 空の場合の処理 : 目標 )
    ( 節の場合の処理 : A -> 列記型@{ i } A -> 目標 )
    : 目標
    := A_2024_09_06_0001@{ i } A 対象 目標 空の場合の処理 節の場合の処理
.

(** 列記型について依存型の場合分けをします。 *)

Definition A_2024_09_06_0002@{ i | }
    :
        forall A : Type@{ i } ,
        forall 対象 : 列記型@{ i } A ,
        forall 目標 : 列記型@{ i } A -> Type@{ i } ,
        目標 ( 空の場合の構築子@{ i } A )
        ->
        ( forall 対象_1 : A , forall 対象_2 : 列記型@{ i } A , 目標 ( 節の場合の構築子@{ i } A 対象_1 対象_2 ) )
        ->
        目標 対象
    :=
        fun A : Type@{ i } =>
        fun 対象 : 列記型@{ i } A =>
        fun 目標 : 列記型@{ i } A -> Type@{ i } =>
        fun 空の場合の処理 : 目標 ( 空の場合の構築子@{ i } A ) =>
        fun 節の場合の処理 : forall 対象_1 : A , forall 対象_2 : 列記型@{ i } A , 目標 ( 節の場合の構築子@{ i } A 対象_1 対象_2 ) =>
        match
            対象
        as
            対象_
        return
            目標 対象_
        with
            A_2024_08_16_0001 _ => 空の場合の処理
            |
            A_2024_08_16_0002 _ 対象_1 対象_2 => 節の場合の処理 対象_1 対象_2
        end
.

Definition 依存型の場合分け@{ i | }
    ( A : Type@{ i } )
    ( 対象 : 列記型@{ i } A )
    ( 目標 : 列記型@{ i } A -> Type@{ i } )
    ( 空の場合の処理 : 目標 ( 空の場合の構築子@{ i } A ) )
    ( 節の場合の処理 : forall 対象_1 : A , forall 対象_2 : 列記型@{ i } A , 目標 ( 節の場合の構築子@{ i } A 対象_1 対象_2 ) )
    : 目標 対象
    := A_2024_09_06_0002@{ i } A 対象 目標 空の場合の処理 節の場合の処理
.

Definition A_2024_09_06_0003@{ i | }
    :
        forall A : Type@{ i } ,
        列記型@{ i } A
        ->
        forall 目標 : Type@{ i } ,
        目標
        ->
        ( A -> 列記型@{ i } A -> 目標 -> 目標 )
        ->
        目標
    :=
        fun A : Type@{ i } =>
        fun 対象 : 列記型@{ i } A =>
        fun 目標 : Type@{ i } =>
        fun 空の場合の処理 : 目標 =>
        fun 節の場合の処理 : A -> 列記型@{ i } A -> 目標 -> 目標 =>
        (
            fix a ( 対象_ : 列記型@{ i } A ) { struct 対象_ } : 目標
                :=
                    場合分け@{ i }
                        A
                        対象_
                        目標
                        空の場合の処理
                        ( fun 対象_1 : A => fun 対象_2 : 列記型@{ i } A => 節の場合の処理 対象_1 対象_2 ( a 対象_2 ) )
        )
            対象
.

Definition 再帰@{ i | }
    ( A : Type@{ i } )
    ( 対象 : 列記型@{ i } A )
    ( 目標 : Type@{ i } )
    ( 空の場合の処理 : 目標 )
    ( 節の場合の処理 : A -> 列記型@{ i } A -> 目標 -> 目標 )
    : 目標
    := A_2024_09_06_0003@{ i } A 対象 目標 空の場合の処理 節の場合の処理
.

Definition A_2024_09_06_0004@{ i | }
    :
        forall A : Type@{ i } ,
        forall 対象 : 列記型@{ i } A ,
        forall 目標 : 列記型@{ i } A -> Type@{ i } ,
        目標 ( 空の場合の構築子@{ i } A )
        ->
        ( forall 対象_1 : A , forall 対象_2 : 列記型@{ i } A , 目標 対象_2 -> 目標 ( 節の場合の構築子@{ i } A 対象_1 対象_2 ) )
        ->
        目標 対象
    :=
        fun A : Type@{ i } =>
        fun 対象 : 列記型@{ i } A =>
        fun 目標 : 列記型@{ i } A -> Type@{ i } =>
        fun 空の場合の処理 : 目標 ( 空の場合の構築子@{ i } A ) =>
        fun
            節の場合の処理
                : forall 対象_1 : A , forall 対象_2 : 列記型@{ i } A , 目標 対象_2 -> 目標 ( 節の場合の構築子@{ i } A 対象_1 対象_2 )
        =>
        (
            fix a ( 対象_ : 列記型@{ i } A ) { struct 対象_ } : 目標 対象_
                :=
                    依存型の場合分け@{ i }
                        A
                        対象_
                        目標
                        空の場合の処理
                        ( fun 対象_1 : A => fun 対象_2 : 列記型@{ i } A => 節の場合の処理 対象_1 対象_2 ( a 対象_2 ) )
        )
            対象
.

Definition 依存型の再帰@{ i | }
    ( A : Type@{ i } )
    ( 対象 : 列記型@{ i } A )
    ( 目標 : 列記型@{ i } A -> Type@{ i } )
    ( 空の場合の処理 : 目標 ( 空の場合の構築子@{ i } A ) )
    ( 節の場合の処理 : forall 対象_1 : A , forall 対象_2 : 列記型@{ i } A , 目標 対象_2 -> 目標 ( 節の場合の構築子@{ i } A 対象_1 対象_2 ) )
    : 目標 対象
    := A_2024_09_06_0004@{ i } A 対象 目標 空の場合の処理 節の場合の処理
.

End A_2024_08_16_0000 .

Module 列記型 := A_2024_08_16_0000 .

(** 折り畳みます。 *)

Definition A_2024_08_16_0003@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , A -> ( B -> A -> A ) -> 列記型@{ i } B -> A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 空の場合の処理 : A =>
        fun 節の場合の処理 : B -> A -> A =>
        fun x : 列記型@{ i } B =>
        列記型.再帰@{ i }
            B
            x
            A
            空の場合の処理
            ( fun x_1 : B => fun x_2 : 列記型@{ i } B => fun a_2 : A => 節の場合の処理 x_1 a_2 )
.

Definition 折り畳む@{ i | }
    ( A : Type@{ i } )
    ( B : Type@{ i } )
    ( 空の場合の処理 : A )
    ( 節の場合の処理 : B -> A -> A )
    ( x : 列記型@{ i } B )
    : A
    := A_2024_08_16_0003@{ i } A B 空の場合の処理 節の場合の処理 x
.

(** 列記型の上で写します。 *)

Definition A_2024_08_16_0004@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , ( B -> A ) -> 列記型@{ i } B -> 列記型@{ i } A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun f : B -> A =>
        fun x : 列記型@{ i } B =>
        列記型.再帰@{ i }
            B
            x
            ( 列記型@{ i } A )
            ( 列記型.空の場合の構築子@{ i } A )
            ( fun x_1 : B => fun x_2 : 列記型@{ i } B => fun a_2 : 列記型@{ i } A => 列記型.節の場合の構築子@{ i } A ( f x_1 ) a_2 )
.

Definition 写す@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) ( f : B -> A ) ( x : 列記型@{ i } B ) : 列記型@{ i } A
    := A_2024_08_16_0004@{ i } A B f x
.

(** 長さを求めます。 *)

Definition A_2024_08_16_0005@{ i | } : forall A : Type@{ i } , 列記型@{ i } A -> 自然数@{ i }
    :=
        fun A : Type@{ i } =>
        fun x : 列記型@{ i } A =>
        列記型.再帰@{ i }
            A
            x
            自然数@{ i }
            ゼロ@{ i }
            ( fun x_1 : A => fun x_2 : 列記型@{ i } A => fun a_2 : 自然数@{ i } => 後者関数@{ i } a_2 )
.

Definition 長さを計算する@{ i | } ( A : Type@{ i } ) ( x : 列記型@{ i } A ) : 自然数@{ i } := A_2024_08_16_0005@{ i } A x .

(** 総和を求めます。 *)

Definition A_2024_08_16_0006@{ i | } : 列記型@{ i } 自然数@{ i } -> 自然数@{ i }
    :=
        fun x : 列記型@{ i } 自然数@{ i } =>
        列記型.再帰@{ i }
            自然数@{ i }
            x
            自然数@{ i }
            ゼロ@{ i }
            ( fun x_1 : 自然数@{ i } => fun x_2 : 列記型@{ i } 自然数@{ i } => fun a_2 : 自然数@{ i } => 足す@{ i } x_1 a_2 )
.

(** 総乗を求めます。 *)

Definition A_2024_08_16_0007@{ i | } : 列記型@{ i } 自然数@{ i } -> 自然数@{ i }
    :=
        fun x : 列記型@{ i } 自然数@{ i } =>
        列記型.再帰@{ i }
            自然数@{ i }
            x
            自然数@{ i }
            一@{ i }
            ( fun x_1 : 自然数@{ i } => fun x_2 : 列記型@{ i } 自然数@{ i } => fun a_2 : 自然数@{ i } => 掛ける@{ i } x_1 a_2 )
.

(** 結合します。 *)

Definition A_2024_08_16_0008@{ i | } : forall A : Type@{ i } , 列記型@{ i } A -> 列記型@{ i } A -> 列記型@{ i } A
    :=
        fun A : Type@{ i } =>
        fun x : 列記型@{ i } A =>
        列記型.再帰@{ i }
            A
            x
            ( 列記型@{ i } A -> 列記型@{ i } A )
            ( fun y : 列記型@{ i } A => y )
            (
                    fun x_1 : A =>
                    fun x_2 : 列記型@{ i } A =>
                    fun a_2 : 列記型@{ i } A -> 列記型@{ i } A =>
                    fun y : 列記型@{ i } A =>
                    列記型.節の場合の構築子@{ i } A x_1 ( a_2 y )
            )
.

Definition 結合する@{ i | } ( A : Type@{ i } ) ( x : 列記型@{ i } A ) ( y : 列記型@{ i } A ) : 列記型@{ i } A
    := A_2024_08_16_0008@{ i } A x y
.

(** 平らにします。 *)

Definition A_2024_08_16_0009@{ i | } : forall A : Type@{ i } , 列記型@{ i } ( 列記型@{ i } A ) -> 列記型@{ i } A
    :=
        fun A : Type@{ i } =>
        fun x : 列記型@{ i } ( 列記型@{ i } A ) =>
        列記型.再帰@{ i }
            ( 列記型@{ i } A )
            x
            ( 列記型@{ i } A )
            ( 列記型.空の場合の構築子@{ i } A )
            (
                fun x_1 : 列記型@{ i } A =>
                fun x_2 : 列記型@{ i } ( 列記型@{ i } A ) =>
                fun a_2 : 列記型@{ i } A =>
                A_2024_08_16_0008@{ i } A x_1 a_2
            )
.

Definition 平らにする@{ i | } ( A : Type@{ i } ) ( x : 列記型@{ i } ( 列記型@{ i } A ) ) : 列記型@{ i } A
    := A_2024_08_16_0009@{ i } A x
.

(** 逆順にします。 *)

Definition A_2024_08_16_0010@{ i | } : forall A : Type@{ i } , 列記型@{ i } A -> 列記型@{ i } A
    :=
        fun A : Type@{ i } =>
        fun x : 列記型@{ i } A =>
        (
            列記型.再帰@{ i }
                A
                x
                ( 列記型@{ i } A -> 列記型@{ i } A )
                ( fun y : 列記型@{ i } A => y )
                (
                    fun x_1 : A =>
                    fun x_2 : 列記型@{ i } A =>
                    fun a_2 : 列記型@{ i } A -> 列記型@{ i } A =>
                    fun y : 列記型@{ i } A =>
                    a_2 ( 列記型.節の場合の構築子@{ i } A x_1 y )
                )
        )
            ( 列記型.空の場合の構築子@{ i } A )
.

Definition 逆順にする@{ i | } ( A : Type@{ i } ) ( x : 列記型@{ i } A ) : 列記型@{ i } A := A_2024_08_16_0010@{ i } A x .

End A_2024_09_06_0000 .

(** * 双関数型に関する定義 *)

(** 双関数型に関するモジュールを定義します。 *)

Module A_2024_09_06_0005 .

(** << A_2024_08_26_0002 >> を取り込みます。 *)

Import A_2024_08_26_0002 .

(** << A_2024_08_28_0000 >> を取り込みます。 *)

Import A_2024_08_28_0000 .

(** 双関数型です。 [A] から [B] への関数と [B] から [A] への関数の直積です。 *)

Inductive A_2024_08_02_0004@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) : Type@{ i }
    := A_2024_08_02_0005 : ( A -> B ) -> ( B -> A ) -> A_2024_08_02_0004 A B
.

Definition 双関数型@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) : Type@{ i } := A_2024_08_02_0004@{ i } A B .

Module A_2024_08_02_0004 .

(** 一番目の区域の値を取り出します。 *)

Definition A_2024_08_02_0006@{ i | } : forall A : Type@{ i } , forall B : Type@{ i } , 双関数型@{ i } B A -> B -> A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 対象 : 双関数型@{ i } B A =>
        fun x : B =>
        match 対象 with A_2024_08_02_0005 _ _ 対象_1 対象_2 => 対象_1 x end
.

Definition 一番目の区域の分解子@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) ( 対象 : 双関数型@{ i } B A ) ( x : B ) : A
    := A_2024_08_02_0006@{ i } A B 対象 x
.

(** 二番目の区域の値を取り出します。 *)

Definition A_2024_08_02_0007@{ i | } : forall A : Type@{ i } , forall B : Type@{ i } , 双関数型@{ i } A B -> B -> A
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 対象 : 双関数型@{ i } A B =>
        fun x : B =>
        match 対象 with A_2024_08_02_0005 _ _ 対象_1 対象_2 => 対象_2 x end
.

Definition 二番目の区域の分解子@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) ( 対象 : 双関数型@{ i } A B ) ( x : B ) : A
    := A_2024_08_02_0007@{ i } A B 対象 x
.

(** 双関数型についての余場合分けです。 *)

Definition A_2024_09_06_0006@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        forall 前提 : Type@{ i } ,
        ( 前提 -> A -> B )
        ->
        ( 前提 -> B -> A )
        ->
        前提
        ->
        双関数型@{ i } A B
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 前提 : Type@{ i } =>
        fun 一番目の区域の処理 : 前提 -> A -> B =>
        fun 二番目の区域の処理 : 前提 -> B -> A =>
        fun 対象 : 前提 =>
        A_2024_08_02_0005@{ i } A B ( 一番目の区域の処理 対象 ) ( 二番目の区域の処理 対象 )
.

Definition 余場合分け@{ i | }
    ( A : Type@{ i } )
    ( B : Type@{ i } )
    ( 前提 : Type@{ i } )
    ( 一番目の区域の処理 : 前提 -> A -> B )
    ( 二番目の区域の処理 : 前提 -> B -> A )
    ( 対象 : 前提 )
    : 双関数型@{ i } A B
    := A_2024_09_06_0006@{ i } A B 前提 一番目の区域の処理 二番目の区域の処理 対象
.

(** 双関数型についての余場合分けの整合性です。 *)

Definition A_2024_09_06_0007@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        forall 前提 : Type@{ i } ,
        forall 余表示射 : 双関数型@{ i } A B -> 前提 ,
        forall 一番目の区域の処理 : 前提 -> A -> B ,
        (
            forall 対象 : 双関数型@{ i } A B ,
            forall 述語 : ( A -> B ) -> Type@{ i } ,
            述語 ( 一番目の区域の処理 ( 余表示射 対象 ) )
            ->
            述語 ( 一番目の区域の分解子@{ i } B A 対象 )
        )
        ->
        forall 二番目の区域の処理 : 前提 -> B -> A ,
        (
            forall 対象 : 双関数型@{ i } A B ,
            forall 述語 : ( B -> A ) -> Type@{ i } ,
            述語 ( 二番目の区域の処理 ( 余表示射 対象 ) )
            ->
            述語 ( 二番目の区域の分解子@{ i } A B 対象 )
        )
        ->
        forall 対象 : 双関数型@{ i } A B ,
        forall 述語 : 双関数型@{ i } A B -> Type@{ i } ,
        述語 ( 余場合分け@{ i } A B 前提 一番目の区域の処理 二番目の区域の処理 ( 余表示射 対象 ) )
        ->
        述語 対象
.
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( fun B : Type@{ i } => _ ) .
    refine ( fun 前提 : Type@{ i } => _ ) .
    refine ( fun 余表示射 : 双関数型@{ i } A B -> 前提 => _ ) .
    refine ( fun 一番目の区域の処理 : 前提 -> A -> B => _ ) .
    refine
        (
            fun
                一番目の区域の処理の整合性
                    :
                        forall 対象 : 双関数型@{ i } A B ,
                        forall 述語 : ( A -> B ) -> Type@{ i } ,
                        述語 ( 一番目の区域の処理 ( 余表示射 対象 ) )
                        ->
                        述語 ( 一番目の区域の分解子@{ i } B A 対象 )
            =>
                _
        )
    .
    refine ( fun 二番目の区域の処理 : 前提 -> B -> A => _ ) .
    refine
        (
            fun
                二番目の区域の処理の整合性
                    :
                        forall 対象 : 双関数型@{ i } A B ,
                        forall 述語 : ( B -> A ) -> Type@{ i } ,
                        述語 ( 二番目の区域の処理 ( 余表示射 対象 ) )
                        ->
                        述語 ( 二番目の区域の分解子@{ i } A B 対象 )
            =>
                _
        )
    .
    refine ( fun 対象 : 双関数型@{ i } A B => _ ) .
    refine
        (
            match
                対象
            as
                対象_
            return
                forall 述語 : 双関数型@{ i } A B -> Type@{ i } ,
                述語 ( 余場合分け@{ i } A B 前提 一番目の区域の処理 二番目の区域の処理 ( 余表示射 対象_ ) )
                ->
                述語 対象_
            with
                A_2024_08_02_0005 _ _ 対象_1 対象_2 => _
            end
        )
    .
    refine ( fun 述語 : 双関数型@{ i } A B -> Type@{ i } => _ ) .
    refine
        (
            fun
                x
                    :
                        述語
                            (
                                余場合分け@{ i }
                                    A
                                    B
                                    前提
                                    一番目の区域の処理
                                    二番目の区域の処理
                                    ( 余表示射 ( A_2024_08_02_0005@{ i } A B 対象_1 対象_2 ) )
                            )
            =>
                _
        )
    .
    refine
        (
            一番目の区域の処理の整合性
                ( A_2024_08_02_0005@{ i } A B 対象_1 対象_2 )
                ( fun 対象_1_ : A -> B => 述語 ( A_2024_08_02_0005@{ i } A B 対象_1_ 対象_2 ) )
                _
        )
    .
    refine
        (
            二番目の区域の処理の整合性
                ( A_2024_08_02_0005@{ i } A B 対象_1 対象_2 )
                (
                    fun 対象_2_ : B -> A =>
                    述語
                        (
                            A_2024_08_02_0005@{ i }
                                A
                                B
                                ( 一番目の区域の処理 ( 余表示射 ( A_2024_08_02_0005@{ i } A B 対象_1 対象_2 ) ) )
                                対象_2_
                        )
                )
                _
        )
    .
    exact x .
Defined .

Definition 余場合分けの整合性@{ i | }
    ( A : Type@{ i } )
    ( B : Type@{ i } )
    ( 前提 : Type@{ i } )
    ( 余表示射 : 双関数型@{ i } A B -> 前提 )
    ( 一番目の区域の処理 : 前提 -> A -> B )
    (
        一番目の区域の処理の整合性
            :
                forall 対象 : 双関数型@{ i } A B ,
                forall 述語 : ( A -> B ) -> Type@{ i } ,
                述語 ( 一番目の区域の処理 ( 余表示射 対象 ) )
                ->
                述語 ( 一番目の区域の分解子@{ i } B A 対象 )
    )
    ( 二番目の区域の処理 : 前提 -> B -> A )
    (
        二番目の区域の処理の整合性
            :
                forall 対象 : 双関数型@{ i } A B ,
                forall 述語 : ( B -> A ) -> Type@{ i } ,
                述語 ( 二番目の区域の処理 ( 余表示射 対象 ) )
                ->
                述語 ( 二番目の区域の分解子@{ i } A B 対象 )
    )
    ( 対象 : 双関数型@{ i } A B )
    ( 述語 : 双関数型@{ i } A B -> Type@{ i } )
    ( x : 述語 ( 余場合分け@{ i } A B 前提 一番目の区域の処理 二番目の区域の処理 ( 余表示射 対象 ) ) )
    : 述語 対象
    :=
        A_2024_09_06_0007@{ i }
            A
            B
            前提
            余表示射
            一番目の区域の処理
            一番目の区域の処理の整合性
            二番目の区域の処理
            二番目の区域の処理の整合性
            対象
            述語
            x
.

End A_2024_08_02_0004 .

Module 双関数型 := A_2024_08_02_0004 .

(** 双関数型を構築します。 *)

Definition A_2024_09_06_0008@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , ( A -> B ) -> ( B -> A ) -> 双関数型@{ i } A B
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 対象_1 : A -> B =>
        fun 対象_2 : B -> A =>
            双関数型.余場合分け@{ i }
                A
                B
                単一型@{ i }
                ( 定数関数を作る@{ i } ( A -> B ) 単一型@{ i } 対象_1 )
                ( 定数関数を作る@{ i } ( B -> A ) 単一型@{ i } 対象_2 )
                単一値@{ i }
.

(** 双関数型について場合分けします。 *)

Definition A_2024_09_06_0009@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        双関数型@{ i } A B
        ->
        forall 目標 : Type@{ i } ,
        ( ( A -> B ) -> ( B -> A ) -> 目標 )
        ->
        目標
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 対象 : 双関数型@{ i } A B =>
        fun 目標 : Type@{ i } =>
        fun 処理 : ( A -> B ) -> ( B -> A ) -> 目標 =>
        処理 ( 双関数型.一番目の区域の分解子@{ i } B A 対象 ) ( 双関数型.二番目の区域の分解子@{ i } A B 対象 )
.

(** 双関数型について依存型の場合分けをします。 *)

Definition A_2024_09_06_0010@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        forall 対象 : 双関数型@{ i } A B ,
        forall 目標 : 双関数型@{ i } A B -> Type@{ i } ,
        ( forall 対象_1 : A -> B , forall 対象_2 : B -> A , 目標 ( A_2024_09_06_0008@{ i } A B 対象_1 対象_2 ) )
        ->
        目標 対象
    :=
        fun A : Type@{ i } =>
        fun B : Type@{ i } =>
        fun 対象 : 双関数型@{ i } A B =>
        fun 目標 : 双関数型@{ i } A B -> Type@{ i } =>
        fun 処理 : forall 対象_1 : A -> B , forall 対象_2 : B -> A , 目標 ( A_2024_09_06_0008@{ i } A B 対象_1 対象_2 ) =>
        双関数型.余場合分けの整合性@{ i }
            A
            B
            ( 双関数型@{ i } A B )
            ( 恒等関数@{ i } ( 双関数型@{ i } A B ) )
            ( 双関数型.一番目の区域の分解子@{ i } B A )
            (
                fun 対象 : 双関数型@{ i } A B =>
                fun 述語 : ( A -> B ) -> Type@{ i } =>
                fun x : 述語 ( 双関数型.一番目の区域の分解子@{ i } B A ( 恒等関数@{ i } ( 双関数型@{ i } A B ) 対象 ) ) =>
                x
            )
            ( 双関数型.二番目の区域の分解子@{ i } A B )
            (
                fun 対象 : 双関数型@{ i } A B =>
                fun 述語 : ( B -> A ) -> Type@{ i } =>
                fun x : 述語 ( 双関数型.二番目の区域の分解子@{ i } A B ( 恒等関数@{ i } ( 双関数型@{ i } A B ) 対象 ) ) =>
                x
            )
            対象
            目標
            ( 処理 ( 双関数型.一番目の区域の分解子@{ i } B A 対象 ) ( 双関数型.二番目の区域の分解子@{ i } A B 対象 ) )
.

End A_2024_09_06_0005 .

(** * 否定に関する命題論理の範囲の定理 *)

(** 否定に関する命題論理の範囲の定理を証明します。 *)

Module A_2024_09_07_0000 .

(** << A_2024_08_26_0002 >> を取り込みます。 *)

Import A_2024_08_26_0002 .

(** << A_2024_08_26_0003 >> を取り込みます。 *)

Import A_2024_08_26_0003 .

(** << A_2024_08_27_0000 >> を取り込みます。 *)

Import A_2024_08_27_0000 .

(** << A_2024_08_27_0004 >> を取り込みます。 *)

Import A_2024_08_27_0004 .

(** << A_2024_08_28_0006 >> を取り込みます。 *)

Import A_2024_08_28_0006 .

(** << A_2024_09_06_0005 >> を取り込みます。 *)

Import A_2024_09_06_0005 .

(** [A] と [A] の否定は両立せず、また決して同値にならないことを示します。 *)

(** [A] と [A] の否定の直積の否定です。 *)

Definition A_2024_08_02_0008@{ i | } : forall A : Type@{ i } , 否定型@{ i } ( 直積型@{ i } A ( 否定型@{ i } A ) ) .
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( 否定型.構築子@{ i } ( 直積型@{ i } A ( 否定型@{ i } A ) ) _ ) .
    refine ( fun x : 直積型@{ i } A ( 否定型@{ i } A ) => _ ) .
    refine ( 否定型.分解子@{ i } A ( 直積型.二番目の区域の分解子@{ i } ( 否定型@{ i } A ) A x ) _ ) .
    exact ( 直積型.一番目の区域の分解子@{ i } A ( 否定型@{ i } A ) x ) .
Defined .

(** [A] と [A] の否定の双関数の否定です。 *)

Definition A_2024_08_02_0009@{ i | } : forall A : Type@{ i } , 否定型@{ i } ( 双関数型@{ i } A ( 否定型@{ i } A ) ) .
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( 否定型.構築子@{ i } ( 双関数型@{ i } A ( 否定型@{ i } A ) ) _ ) .
    refine ( fun x : 双関数型@{ i } A ( 否定型@{ i } A ) => _ ) .
    refine ( let a : 否定型@{ i } A := ?[a] in _ ) .
    [a]: {
        refine ( 否定型.構築子@{ i } A _ ) .
        refine ( fun y : A => _ ) .
        refine ( 否定型.分解子@{ i } A ( 双関数型.一番目の区域の分解子@{ i } ( 否定型@{ i } A ) A x y ) _ ) .
        exact y .
    }
    {
        refine ( 否定型.分解子@{ i } A a _ ) .
        exact ( 双関数型.二番目の区域の分解子@{ i } A ( 否定型@{ i } A ) x a ) .
    }
Defined .

(** 二重否定が作用子として振る舞うことを証明します。 *)

(** 持ち上げます。 *)

Definition A_2024_08_06_0000@{ i | } : forall A : Type@{ i } , A -> 否定型@{ i } ( 否定型@{ i } A ) .
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( fun x : A => _ ) .
    refine ( 否定型.構築子@{ i } ( 否定型@{ i } A ) _ ) .
    refine ( fun y : 否定型@{ i } A => _ ) .
    refine ( 否定型.分解子@{ i } A y _ ) .
    exact x .
Defined .

(** 写します。 *)

Definition A_2024_08_06_0001@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , ( B -> A ) -> 否定型@{ i } ( 否定型@{ i } B ) -> 否定型@{ i } ( 否定型@{ i } A )
.
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( fun B : Type@{ i } => _ ) .
    refine ( fun f : B -> A => _ ) .
    refine ( 対偶を取る@{ i } ( 否定型@{ i } A ) ( 否定型@{ i } B ) _ ) .
    refine ( 対偶を取る@{ i } B A _ ) .
    exact f .
Defined .

(** 束縛します。 *)

Definition A_2024_08_06_0002@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        ( B -> 否定型@{ i } ( 否定型@{ i } A ) )
        ->
        ( 否定型@{ i } ( 否定型@{ i } B ) )
        ->
        否定型@{ i } ( 否定型@{ i } A )
.
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( fun B : Type@{ i } => _ ) .
    refine ( fun f : B -> 否定型@{ i } ( 否定型@{ i } A ) => _ ) .
    refine ( fun x : 否定型@{ i } ( 否定型@{ i } B ) => _ ) .
    refine ( 否定型.構築子@{ i } ( 否定型@{ i } A ) _ ) .
    refine ( fun y : 否定型@{ i } A => _ ) .
    refine ( 否定型.分解子@{ i } ( 否定型@{ i } B ) x _ ) .
    refine ( 否定型.構築子@{ i } B _ ) .
    refine ( fun z : B => _ ) .
    refine ( 否定型.分解子@{ i } ( 否定型@{ i } A ) ( f z ) _ ) .
    exact y .
Defined .

(** 二重否定で包んだ古典論理の定理を証明します。 *)

(** 二重否定除去です。 *)

Definition A_2024_08_09_0000@{ i | } : forall A : Type@{ i } , 否定型@{ i } ( 否定型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) -> A ) ) .
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( 否定型.構築子@{ i } ( 否定型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) -> A ) ) _ ) .
    refine ( fun x : 否定型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) -> A ) => _ ) .
    refine ( 否定型.分解子@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) -> A ) x _ ) .
    refine ( fun y : 否定型@{ i } ( 否定型@{ i } A ) => _ ) .
    refine ( 終了する@{ i } A _ ) .
    refine ( 否定型.分解子@{ i } ( 否定型@{ i } A ) y _ ) .
    refine ( 否定型.構築子@{ i } A _ ) .
    refine ( fun z : A => _ ) .
    refine ( 否定型.分解子@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) -> A ) x _ ) .
    exact ( 定数関数を作る@{ i } A ( 否定型@{ i } ( 否定型@{ i } A ) ) z ) .
Defined .

(** パースの法則です。 *)

Definition A_2024_08_09_0001@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , 否定型@{ i } ( 否定型@{ i } ( ( ( A -> B ) -> A ) -> A ) )
.
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( fun B : Type@{ i } => _ ) .
    refine ( 否定型.構築子@{ i } ( 否定型@{ i } ( ( ( A -> B ) -> A ) -> A ) ) _ ) .
    refine ( fun x : ( 否定型@{ i } ( ( ( A -> B ) -> A ) -> A ) ) => _ ) .
    refine ( 否定型.分解子@{ i } ( ( ( A -> B ) -> A ) -> A ) x _ ) .
    refine ( fun y : ( A -> B ) -> A => _ ) .
    refine ( y _ ) .
    refine ( fun z : A => _ ) .
    refine ( 終了する@{ i } B _ ) .
    refine ( 否定型.分解子@{ i } ( ( ( A -> B ) -> A ) -> A ) x _ ) .
    exact ( 定数関数を作る@{ i } A ( ( A -> B ) -> A ) z ) .
Defined .

(** [A] から [B] への関数と [B] から [A] への関数の直和です。 *)

Definition A_2024_08_09_0002@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , 否定型@{ i } ( 否定型@{ i } ( 直和型@{ i } ( A -> B ) ( B -> A ) ) )
.
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( fun B : Type@{ i } => _ ) .
    refine ( 否定型.構築子@{ i } ( 否定型@{ i } ( 直和型@{ i } ( A -> B ) ( B -> A ) ) ) _ ) .
    refine ( fun x : ( 否定型@{ i } ( 直和型@{ i } ( A -> B ) ( B -> A ) ) ) => _ ) .
    refine ( 否定型.分解子@{ i } ( 直和型@{ i } ( A -> B ) ( B -> A ) ) x _ ) .
    refine ( 直和型.左の場合の構築子@{ i } ( A -> B ) ( B -> A ) _ ) .
    refine ( fun y : A => _ ) .
    refine ( 終了する@{ i } B _ ) .
    refine ( 否定型.分解子@{ i } ( 直和型@{ i } ( A -> B ) ( B -> A ) ) x _ ) .
    refine ( 直和型.右の場合の構築子@{ i } ( A -> B ) ( B -> A ) _ ) .
    exact ( 定数関数を作る@{ i } A B y ) .
Defined .

(** 排中律です。 *)

Definition A_2024_08_09_0003@{ i | }
    : forall A : Type@{ i } , forall B : Type@{ i } , 否定型@{ i } ( 否定型@{ i } ( 直和型@{ i } A ( 否定型@{ i } A ) ) )
.
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( fun B : Type@{ i } => _ ) .
    refine ( 否定型.構築子@{ i } ( 否定型@{ i } ( 直和型@{ i } A ( 否定型@{ i } A ) ) ) _ ) .
    refine ( fun x : ( 否定型@{ i } ( 直和型@{ i } A ( 否定型@{ i } A ) ) ) => _ ) .
    refine ( 否定型.分解子@{ i } ( 直和型@{ i } A ( 否定型@{ i } A ) ) x _ ) .
    refine ( 直和型.右の場合の構築子@{ i } A ( 否定型@{ i } A ) _ ) .
    refine ( 否定型.構築子@{ i } A _ ) .
    refine ( fun y : A => _ ) .
    refine ( 否定型.分解子@{ i } ( 直和型@{ i } A ( 否定型@{ i } A ) ) x _ ) .
    refine ( 直和型.左の場合の構築子@{ i } A ( 否定型@{ i } A ) _ ) .
    exact y .
Defined .

(** 排中律を仮定することについての定理を証明します。 *)

(** 排中律を仮定して二重否定の除去を導きます。 *)

Definition A_2024_08_11_0000@{ i | }
    : forall A : Type@{ i } , 直和型@{ i } A ( 否定型@{ i } A ) -> 否定型@{ i } ( 否定型@{ i } A ) -> A
.
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( fun x : 直和型@{ i } A ( 否定型@{ i } A ) => _ ) .
    refine ( fun y : 否定型@{ i } ( 否定型@{ i } A ) => _ ) .
    refine
        (
            直和型.場合分け@{ i }
                A
                ( 否定型@{ i } A )
                x
                A
                ( fun x_左 : A => _ )
                ( fun x_右 : 否定型@{ i } A => _ )
        )
    .
    {
        exact x_左 .
    }
    {
        refine ( 終了する@{ i } A _ ) .
        refine ( 否定型.分解子@{ i } ( 否定型@{ i } A ) y _ ) .
        exact x_右 .
    }
Defined .

(** 二重否定の元で [A] から [B] が導けることは、 [B] の排中律を仮定して [A] から [B] が導けることと、同値です。 *)

Definition A_2024_08_11_0001@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        双関数型@{ i } ( 否定型@{ i } ( 否定型@{ i } ( B -> A ) ) ) ( 直和型@{ i } A ( 否定型@{ i } A ) -> B -> A )
.
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( fun B : Type@{ i } => _ ) .
    refine
        (
            A_2024_09_06_0008@{ i }
                ( 否定型@{ i } ( 否定型@{ i } ( B -> A ) ) )
                ( 直和型@{ i } A ( 否定型@{ i } A ) -> B -> A )
                _
                _
        )
    .
    {
        refine ( fun x : 否定型@{ i } ( 否定型@{ i } ( B -> A ) ) => _ ) .
        refine ( fun y : 直和型@{ i } A ( 否定型@{ i } A ) => _ ) .
        refine ( fun z : B => _ ) .
        refine
            (
                直和型.場合分け@{ i }
                    A
                    ( 否定型@{ i } A )
                    y
                    A
                    ( fun y_左 : A => _ )
                    ( fun y_右 : 否定型@{ i } A => _ )
            )
        .
        {
            exact y_左 .
        }
        {
            refine ( 終了する@{ i } A _ ) .
            refine ( 否定型.分解子@{ i } ( 否定型@{ i } ( B -> A ) ) x _ ) .
            refine ( 否定型.構築子@{ i } ( B -> A ) _ ) .
            refine ( fun w : B -> A => _ ) .
            refine ( 否定型.分解子@{ i } A y_右 _ ) .
            refine ( w _ ) .
            exact z .
        }
    }
    {
        refine ( fun x : 直和型@{ i } A ( 否定型@{ i } A ) -> B -> A => _ ) .
        refine ( 否定型.構築子@{ i } ( 否定型@{ i } ( B -> A ) ) _ ) .
        refine ( fun y : 否定型@{ i } ( B -> A ) => _ ) .
        refine ( 否定型.分解子@{ i } ( B -> A ) y _ ) .
        refine ( fun z : B => _ ) .
        refine ( x _ _ ) .
        {
            refine ( 直和型.右の場合の構築子@{ i } A ( 否定型@{ i } A ) _ ) .
            refine ( 否定型.構築子@{ i } A _ ) .
            refine ( fun w : A => _ ) .
            refine ( 否定型.分解子@{ i } ( B -> A ) y _ ) .
            exact ( 定数関数を作る@{ i } A B w ) .
        }
        {
            exact z .
        }
    }
Defined .

(** 特定の種類の命題では二重否定除去が可能であることを証明します。 *)

(** [A] の否定についての二重否定除去です。 *)

Definition A_2024_08_12_0000@{ i | } : forall A : Type@{ i } , 否定型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) -> 否定型@{ i } A .
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( 対偶を取る@{ i } A ( 否定型@{ i } ( 否定型@{ i } A ) ) _ ) .
    exact ( A_2024_08_06_0000@{ i } A ) .
Defined .

(** [A] から [B] の否定の否定への関数についての二重否定除去です。 *)

Definition A_2024_08_12_0001@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        否定型@{ i } ( 否定型@{ i } ( B -> 否定型@{ i } ( 否定型@{ i } A ) ) )
        ->
        B
        ->
        否定型@{ i } ( 否定型@{ i } A )
.
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( fun B : Type@{ i } => _ ) .
    refine ( fun x : 否定型@{ i } ( 否定型@{ i } ( B -> 否定型@{ i } ( 否定型@{ i } A ) ) ) => _ ) .
    refine ( fun y : B => _ ) .
    refine ( 否定型.構築子@{ i } ( 否定型@{ i } A ) _ ) .
    refine ( fun z : 否定型@{ i } A => _ ) .
    refine ( 否定型.分解子@{ i } ( 否定型@{ i } ( B -> 否定型@{ i } ( 否定型@{ i } A ) ) ) x _ ) .
    refine ( 否定型.構築子@{ i } ( B -> 否定型@{ i } ( 否定型@{ i } A ) ) _ ) .
    refine ( fun w : B -> 否定型@{ i } ( 否定型@{ i } A ) => _ ) .
    refine ( 否定型.分解子@{ i } ( 否定型@{ i } A ) ( w y ) _ ) .
    exact z .
Defined .

(** [A] の否定の否定と [B] の否定の否定の直積についての二重否定除去です。 *)

Definition A_2024_08_12_0002@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        否定型@{ i } ( 否定型@{ i } ( 直積型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) ) )
        ->
        直積型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) )
.
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( fun B : Type@{ i } => _ ) .
    refine
        (
            fun
                x : 否定型@{ i } ( 否定型@{ i } ( 直積型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) ) )
            =>
                _
        )
    .
    refine ( 直積型を構築する@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) _ _ ) .
    {
        refine ( 否定型.構築子@{ i } ( 否定型@{ i } A ) _ ) .
        refine ( fun y : 否定型@{ i } A => _ ) .
        refine
            (
                否定型.分解子@{ i }
                    ( 否定型@{ i } ( 直積型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) ) )
                    x
                    _
            )
        .
        refine ( 否定型.構築子@{ i } ( 直積型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) ) _ ) .
        refine ( fun z : 直積型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) => _ ) .
        refine
            (
                否定型.分解子@{ i }
                    ( 否定型@{ i } A )
                    ( 直積型.一番目の区域の分解子@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) z )
                    _
            )
        .
        exact y .
    }
    {
        refine ( 否定型.構築子@{ i } ( 否定型@{ i } B ) _ ) .
        refine ( fun y : 否定型@{ i } B => _ ) .
        refine
            (
                否定型.分解子@{ i }
                    ( 否定型@{ i } ( 直積型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) ) )
                    x
                    _
            )
        .
        refine ( 否定型.構築子@{ i } ( 直積型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) ) _ ) .
        refine ( fun z : 直積型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) => _ ) .
        refine
            (
                否定型.分解子@{ i }
                    ( 否定型@{ i } B )
                    ( 直積型.二番目の区域の分解子@{ i } ( 否定型@{ i } ( 否定型@{ i } B ) ) ( 否定型@{ i } ( 否定型@{ i } A ) ) z )
                    _
            )
        .
        exact y .
    }
Defined .

(** 否定の位置を動かす定理を証明します。 *)

(** 直積と二重否定の定理です。 *)

Definition A_2024_08_13_0000@{ i | }
    :
        forall A : Type@{ i } ,
        forall B : Type@{ i } ,
        双関数型@{ i }
            ( 否定型@{ i } ( 否定型@{ i } ( 直積型@{ i } A B ) ) )
            ( 直積型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) )
.
Proof .
    refine ( fun A : Type@{ i } => _ ) .
    refine ( fun B : Type@{ i } => _ ) .
    refine
        (
            A_2024_09_06_0008@{ i }
                ( 否定型@{ i } ( 否定型@{ i } ( 直積型@{ i } A B ) ) )
                ( 直積型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) )
                _
                _
        )
    .
    {
        refine ( fun x : 否定型@{ i } ( 否定型@{ i } ( 直積型@{ i } A B ) ) => _ ) .
        refine ( 直積型を構築する@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) _ _ ) .
        {
            refine ( A_2024_08_06_0001@{ i } A ( 直積型@{ i } A B ) _ _ ) .
            {
                exact ( 直積型.一番目の区域の分解子@{ i } A B ) .
            }
            {
                exact x .
            }
        }
        {
            refine ( A_2024_08_06_0001@{ i } B ( 直積型@{ i } A B ) _ _ ) .
            {
                exact ( 直積型.二番目の区域の分解子@{ i } B A ) .
            }
            {
                exact x .
            }
        }
    }
    {
        refine ( fun x : 直積型@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) => _ ) .
        refine ( 否定型.構築子@{ i } ( 否定型@{ i } ( 直積型@{ i } A B ) ) _ ) .
        refine ( fun y : 否定型@{ i } ( 直積型@{ i } A B ) => _ ) .
        refine
            (
                否定型.分解子@{ i }
                    ( 否定型@{ i } A )
                    ( 直積型.一番目の区域の分解子@{ i } ( 否定型@{ i } ( 否定型@{ i } A ) ) ( 否定型@{ i } ( 否定型@{ i } B ) ) x )
                    _
            )
        .
        refine ( 否定型.構築子@{ i } A _ ) .
        refine ( fun z_1 : A => _ ) .
        refine
            (
                否定型.分解子@{ i }
                    ( 否定型@{ i } B )
                    ( 直積型.二番目の区域の分解子@{ i } ( 否定型@{ i } ( 否定型@{ i } B ) ) ( 否定型@{ i } ( 否定型@{ i } A ) ) x )
                    _
            )
        .
        refine ( 否定型.構築子@{ i } B _ ) .
        refine ( fun z_2 : B => _ ) .
        refine ( 否定型.分解子@{ i } ( 直積型@{ i } A B ) y _ ) .
        exact ( 直積型を構築する@{ i } A B z_1 z_2 ) .
    }
Defined .

End A_2024_09_07_0000 .

(** * 残り *)

Import A_2024_08_26_0002 .

Import A_2024_08_26_0003 .

Import A_2024_08_27_0000 .

Import A_2024_08_27_0004 .

Import A_2024_08_28_0000 .

Import A_2024_08_28_0006 .

Import A_2024_08_30_0000 .

Import A_2024_08_30_0006 .

Import A_2024_09_06_0005 .

Import A_2024_09_07_0000 .

(** [A] と [B] の直和の否定の否定から [A] の否定と [B] の否定の直積の否定への関数と [A] の否定と [B] の否定の直積の否定から [A] と [B] の直和の否定の否定への関数の直積です。 *)

Definition A_2024_08_14_0000@{ i | }
        ( A : Type@{ i } )
        ( B : Type@{ i } )
    :
        双関数型@{ i }
            ( 否定型@{ i } ( 否定型@{ i } ( 直和型@{ i } A B ) ) )
            ( 否定型@{ i } ( 直積型@{ i } ( 否定型@{ i } A ) ( 否定型@{ i } B ) ) )
.
Proof .
    refine
        (
            A_2024_08_02_0005@{ i }
                ( 否定型@{ i } ( 否定型@{ i } ( 直和型@{ i } A B ) ) )
                ( 否定型@{ i } ( 直積型@{ i } ( 否定型@{ i } A ) ( 否定型@{ i } B ) ) )
                _
                _
        )
    .
    {
        refine
            (
                let
                    a ( x : 否定型@{ i } ( 否定型@{ i } ( 直和型@{ i } A B ) ) )
                        :
                            否定型@{ i }
                                (
                                    直積型@{ i }
                                        ( 否定型@{ i } A )
                                        ( 否定型@{ i } B )
                                )
                        := _
                in
                    a
            )
        .
        refine ( 否定型.構築子@{ i } ( 直積型@{ i } ( 否定型@{ i } A ) ( 否定型@{ i } B ) ) _ ) .
        refine
            (
                let
                    a ( y : 直積型@{ i } ( 否定型@{ i } A ) ( 否定型@{ i } B ) )
                        : 空型@{ i }
                        := _
                in
                    a
            )
        .
        refine ( 否定型.分解子@{ i } ( 否定型@{ i } ( 直和型@{ i } A B ) ) x _ ) .
        refine ( 否定型.構築子@{ i } ( 直和型@{ i } A B ) _ ) .
        refine
            (
                let
                    a ( z : 直和型@{ i } A B ) : 空型@{ i } := _
                in
                    a
            )
        .
        refine
            (
                match
                    z
                with
                    A_2024_07_21_0006 _ _ z_左 => _
                    |
                    A_2024_07_21_0007 _ _ z_右 => _
                end
            )
        .
        {
            refine
                (
                    否定型.分解子@{ i }
                        A
                        ( 直積型.一番目の区域の分解子@{ i } ( 否定型@{ i } A ) ( 否定型@{ i } B ) y )
                        _
                )
            .
            exact z_左 .
        }
        {
            refine
                (
                    否定型.分解子@{ i }
                        B
                        ( 直積型.二番目の区域の分解子@{ i } ( 否定型@{ i } B ) ( 否定型@{ i } A ) y )
                        _
                )
            .
            exact z_右 .
        }
    }
    {
        refine
            (
                let
                    a
                            (
                                x
                                    :
                                        否定型@{ i }
                                            (
                                                直積型@{ i }
                                                    ( 否定型@{ i } A )
                                                    ( 否定型@{ i } B )
                                            )
                            )
                        : 否定型@{ i } ( 否定型@{ i } ( 直和型@{ i } A B ) )
                        := _
                in
                    a
            )
        .
        refine ( 否定型.構築子@{ i } ( 否定型@{ i } ( 直和型@{ i } A B ) ) _ ) .
        refine
            (
                let
                    a ( y : 否定型@{ i } ( 直和型@{ i } A B ) ) : 空型@{ i } := _
                in
                    a
            )
        .
        refine
            (
                否定型.分解子@{ i }
                    ( 直積型@{ i } ( 否定型@{ i } A ) ( 否定型@{ i } B ) )
                    x
                    _
            )
        .
        refine ( 直積型を構築する@{ i } ( 否定型@{ i } A ) ( 否定型@{ i } B ) _ _ ) .
        {
            exact ( 対偶を取る@{ i } A ( 直和型@{ i } A B ) ( 直和型.左の場合の構築子@{ i } A B ) y ) .
        }
        {
            exact ( 対偶を取る@{ i } B ( 直和型@{ i } A B ) ( 直和型.右の場合の構築子@{ i } A B ) y ) .
        }
    }
Defined .

Definition A_2024_08_15_0000@{ i }
        ( A : Type@{ i } )
        ( B : Type@{ i } )
    :
        双関数型@{ i }
            ( 否定型@{ i } ( 否定型@{ i } ( B -> A ) ) )
            ( 否定型@{ i } ( 否定型@{ i } B ) -> 否定型@{ i } ( 否定型@{ i } A ) )
.
Proof .
    refine
        (
            A_2024_08_02_0005@{ i }
                ( 否定型@{ i } ( 否定型@{ i } ( B -> A ) ) )
                ( 否定型@{ i } ( 否定型@{ i } B ) -> 否定型@{ i } ( 否定型@{ i } A ) )
                _
                _
        )
    .
    {
        refine
            (
                let
                    a
                            ( x : 否定型@{ i } ( 否定型@{ i } ( B -> A ) ) )
                            ( y : 否定型@{ i } ( 否定型@{ i } B ) )
                        : 否定型@{ i } ( 否定型@{ i } A )
                        := _
                in
                    a
            )
        .
        refine ( 否定型.構築子@{ i } ( 否定型@{ i } A ) _ ) .
        refine
            (
                let
                    a ( z : 否定型@{ i } A ) : 空型@{ i } := _
                in
                    a
            )
        .
        refine ( 否定型.分解子@{ i } ( 否定型@{ i } ( B -> A ) ) x _ ) .
        refine ( 否定型.構築子@{ i } ( B -> A ) _ ) .
        refine
            (
                let
                    a ( w : B -> A ) : 空型@{ i } := _
                in
                    a
            )
        .
        refine ( 否定型.分解子@{ i } ( 否定型@{ i } B ) y _ ) .
        refine ( 否定型.構築子@{ i } B _ ) .
        refine
            (
                let
                    a ( v : B ) : 空型@{ i } := _
                in
                    a
            )
        .
        refine ( 否定型.分解子@{ i } A z _ ) .
        exact ( w v ) .
    }
    {
        refine
            (
                let
                    a
                            (
                                x
                                    :
                                        否定型@{ i } ( 否定型@{ i } B )
                                        ->
                                        否定型@{ i } ( 否定型@{ i } A )
                            )
                        : 否定型@{ i } ( 否定型@{ i } ( B -> A ) )
                        := _
                in
                    a
            )
        .
        refine ( 否定型.構築子@{ i } ( 否定型@{ i } ( B -> A ) ) _ ) .
        refine
            (
                let
                    a ( y : 否定型@{ i } ( B -> A ) ) : 空型@{ i } := _
                in
                    a
            )
        .
        refine ( 否定型.分解子@{ i } ( B -> A ) y _ ) .
        refine
            (
                let
                    a ( z : B ) : A := _
                in
                    a
            )
        .
        refine
            (
                let
                    a : 否定型@{ i } ( 否定型@{ i } B ) := A_2024_08_06_0000@{ i } B z
                in
                    _
            )
        .
        refine ( 終了する@{ i } A _ ) .
        refine ( 否定型.分解子@{ i } ( 否定型@{ i } A ) ( x a ) _ ) .
        refine ( 否定型.構築子@{ i } A _ ) .
        refine
            (
                let
                    b ( w : A ) : 空型@{ i } := _
                in
                    b
            )
        .
        refine ( 否定型.分解子@{ i } ( B -> A ) y _ ) .
        refine
            (
                let
                    b ( v : B ) : A := _
                in
                    b
            )
        .
        exact w .
    }
Defined .

(** 道を定義します。「道」は "path" の訳語です。 *)

Inductive A_2024_07_22_0009@{ i | } ( A : Type@{ i } ) : A -> A -> Type@{ i }
    := A_2024_07_22_0010 : forall x : A , A_2024_07_22_0009 A x x
.

(** 結合です。 *)

Definition A_2024_07_22_0011@{ i | }
        ( A : Type@{ i } )
        ( x : A )
        ( y : A )
        ( z : A )
        ( p : A_2024_07_22_0009@{ i } A x z )
        ( q : A_2024_07_22_0009@{ i } A z y )
    : A_2024_07_22_0009@{ i } A x y
    :=
        let
            a : A_2024_07_22_0009@{ i } A z y -> A_2024_07_22_0009@{ i } A x y
                :=
                    match
                        p
                    in
                        A_2024_07_22_0009 _ x_ z_
                    return
                        A_2024_07_22_0009@{ i } A z_ y -> A_2024_07_22_0009@{ i } A x_ y
                    with
                        A_2024_07_22_0010 _ w
                            =>
                                let
                                    a ( q_ : A_2024_07_22_0009@{ i } A w y ) : A_2024_07_22_0009@{ i } A w y
                                        :=
                                            match
                                                q_
                                            in
                                                A_2024_07_22_0009 _ w_ y_
                                            return
                                                A_2024_07_22_0009@{ i } A w_ y_
                                            with
                                                A_2024_07_22_0010 _ v => A_2024_07_22_0010@{ i } A v
                                            end
                                in
                                    a
                    end
        in
            a q
.

(** 反転です。 *)

Definition A_2024_07_22_0012@{ i | } ( A : Type@{ i } ) ( x : A ) ( y : A ) ( p : A_2024_07_22_0009@{ i } A y x )
    : A_2024_07_22_0009@{ i } A x y
    :=
        match
            p
        in
            A_2024_07_22_0009 _ y_ x_
        return
            A_2024_07_22_0009@{ i } A x_ y_
        with
            A_2024_07_22_0010 _ z => A_2024_07_22_0010@{ i } A z
        end
.

(** 関数を道へ適用します。 *)

Definition A_2024_07_22_0013@{ i | }
        ( A : Type@{ i } )
        ( B : Type@{ i } )
        ( f : B -> A )
        ( x : B )
        ( y : B )
        ( p : A_2024_07_22_0009@{ i } B x y )
    : A_2024_07_22_0009@{ i } A ( f x ) ( f y )
    :=
        match
            p
        in
            A_2024_07_22_0009 _ x_ y_
        return
            A_2024_07_22_0009@{ i } A ( f x_ ) ( f y_ )
        with
            A_2024_07_22_0010 _ z => A_2024_07_22_0010@{ i } A ( f z )
        end
.

(** 道に沿って輸送します。「輸送する」は "transport" の訳語です。 *)

Definition A_2024_07_22_0014@{ i | }
        ( A : Type@{ i } )
        ( B : A -> Type@{ i } )
        ( x : A )
        ( y : A )
        ( p : A_2024_07_22_0009@{ i } A y x )
        ( u : B y )
    : B x
    :=
        let
            a : B y -> B x
                :=
                    match
                        p
                    in
                        A_2024_07_22_0009 _ y_ x_
                    return
                        B y_ -> B x_
                    with
                        A_2024_07_22_0010 _ z
                            =>
                                let
                                    a ( u_ : B z ) : B z := u_
                                in
                                    a
                    end
        in
            a u
.

(** 依存関数を道に適用します。 *)

Definition A_2024_07_22_0015@{ i | }
        ( A : Type@{ i } )
        ( B : A -> Type@{ i } )
        ( f : forall x : A , B x )
        ( x : A )
        ( y : A )
        ( p : A_2024_07_22_0009@{ i } A x y )
    : A_2024_07_22_0009@{ i } ( B y ) ( A_2024_07_22_0014@{ i } A B y x p ( f x ) ) ( f y )
    :=
        match
            p
        as
            p_
        in
            A_2024_07_22_0009 _ x_ y_
        return
            A_2024_07_22_0009@{ i } ( B y_ ) ( A_2024_07_22_0014@{ i } A B y_ x_ p_ ( f x_ ) ) ( f y_ )
        with
            A_2024_07_22_0010 _ z => A_2024_07_22_0010@{ i } ( B z ) ( f z )
        end
.

(** 恒等道と恒等道を結合した道は恒等道に等しくなります。 *)

Definition A_2024_07_22_0027@{ i | } ( A : Type@{ i } ) ( x : A )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } A x x )
            ( A_2024_07_22_0011@{ i } A x x x ( A_2024_07_22_0010@{ i } A x ) ( A_2024_07_22_0010@{ i } A x ) )
            ( A_2024_07_22_0010@{ i } A x )
    := A_2024_07_22_0010@{ i } ( A_2024_07_22_0009@{ i } A x x ) ( A_2024_07_22_0010@{ i } A x )
.

(** 結合演算は結合法則を満たします。 *)

Definition A_2024_07_22_0032@{ i | }
        ( A : Type@{ i } )
        ( x : A )
        ( y : A )
        ( z : A )
        ( w : A )
        ( p : A_2024_07_22_0009@{ i } A x z )
        ( q : A_2024_07_22_0009@{ i } A z w )
        ( r : A_2024_07_22_0009@{ i } A w y )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } A x y )
            ( A_2024_07_22_0011@{ i } A x y w ( A_2024_07_22_0011@{ i } A x w z p q ) r )
            ( A_2024_07_22_0011@{ i } A x y z p ( A_2024_07_22_0011@{ i } A z y w q r ) )
.
Proof .
    refine
        (
            let
                a
                    :
                        forall q_ : A_2024_07_22_0009@{ i } A z w ,
                        forall r_ : A_2024_07_22_0009@{ i } A w y ,
                        A_2024_07_22_0009@{ i }
                            ( A_2024_07_22_0009@{ i } A x y )
                            ( A_2024_07_22_0011@{ i } A x y w ( A_2024_07_22_0011@{ i } A x w z p q_ ) r_ )
                            ( A_2024_07_22_0011@{ i } A x y z p ( A_2024_07_22_0011@{ i } A z y w q_ r_ ) )
                    := _
            in
                a q r
        )
    .
    refine
        (
            match
                p
            as
                p_
            in
                A_2024_07_22_0009 _ x_ z_
            return
                forall q_ : A_2024_07_22_0009@{ i } A z_ w ,
                forall r_ : A_2024_07_22_0009@{ i } A w y ,
                A_2024_07_22_0009@{ i }
                    ( A_2024_07_22_0009@{ i } A x_ y )
                    ( A_2024_07_22_0011@{ i } A x_ y w ( A_2024_07_22_0011@{ i } A x_ w z_ p_ q_ ) r_ )
                    ( A_2024_07_22_0011@{ i } A x_ y z_ p_ ( A_2024_07_22_0011@{ i } A z_ y w q_ r_ ) )
            with
                A_2024_07_22_0010 _ v => _
            end
        )
    .
    refine
        (
            let
                a ( q_ : A_2024_07_22_0009@{ i } A v w )
                    :
                        forall r_ : A_2024_07_22_0009@{ i } A w y ,
                        A_2024_07_22_0009@{ i }
                            ( A_2024_07_22_0009@{ i } A v y )
                            (
                                A_2024_07_22_0011@{ i }
                                    A
                                    v
                                    y
                                    w
                                    ( A_2024_07_22_0011@{ i } A v w v ( A_2024_07_22_0010@{ i } A v ) q_ )
                                    r_
                            )
                            (
                                A_2024_07_22_0011@{ i }
                                    A
                                    v
                                    y
                                    v
                                    ( A_2024_07_22_0010@{ i } A v ) ( A_2024_07_22_0011@{ i } A v y w q_ r_ )
                            )
                    := _
            in
                a
        )
    .
    refine
        (
            match
                q_
            as
                q__
            in
                A_2024_07_22_0009 _ v_ w_
            return
                forall r_ : A_2024_07_22_0009@{ i } A w_ y ,
                A_2024_07_22_0009@{ i }
                    ( A_2024_07_22_0009@{ i } A v_ y )
                    (
                        A_2024_07_22_0011@{ i }
                            A
                            v_
                            y
                            w_
                            ( A_2024_07_22_0011@{ i } A v_ w_ v_ ( A_2024_07_22_0010@{ i } A v_ ) q__ )
                            r_
                    )
                    (
                        A_2024_07_22_0011@{ i }
                            A
                            v_
                            y
                            v_
                            ( A_2024_07_22_0010@{ i } A v_ )
                            ( A_2024_07_22_0011@{ i } A v_ y w_ q__ r_ )
                    )
            with
                A_2024_07_22_0010 _ u => _
            end
        )
    .
    refine
        (
            let
                a ( r_ : A_2024_07_22_0009@{ i } A u y )
                    :
                        A_2024_07_22_0009@{ i }
                            ( A_2024_07_22_0009@{ i } A u y )
                            (
                                A_2024_07_22_0011@{ i }
                                    A
                                    u
                                    y
                                    u
                                    (
                                        A_2024_07_22_0011@{ i }
                                            A
                                            u
                                            u
                                            u
                                            ( A_2024_07_22_0010@{ i } A u )
                                            ( A_2024_07_22_0010@{ i } A u )
                                    )
                                    r_
                            )
                            (
                                A_2024_07_22_0011@{ i }
                                    A
                                    u
                                    y
                                    u
                                    ( A_2024_07_22_0010@{ i } A u )
                                    (
                                        A_2024_07_22_0011@{ i }
                                            A
                                            u
                                            y
                                            u
                                            ( A_2024_07_22_0010@{ i } A u )
                                            r_
                                    )
                            )
                    := _
            in
                a
        )
    .
    refine
        (
            match
                r_
            as
                r__
            in
                A_2024_07_22_0009 _ u_ y_
            return
                A_2024_07_22_0009@{ i }
                    ( A_2024_07_22_0009@{ i } A u_ y_ )
                    (
                        A_2024_07_22_0011@{ i }
                            A
                            u_
                            y_
                            u_
                            (
                                A_2024_07_22_0011@{ i }
                                    A
                                    u_
                                    u_
                                    u_
                                    ( A_2024_07_22_0010@{ i } A u_ )
                                    ( A_2024_07_22_0010@{ i } A u_ )
                            )
                            r__
                    )
                    (
                        A_2024_07_22_0011@{ i }
                            A
                            u_
                            y_
                            u_
                            ( A_2024_07_22_0010@{ i } A u_ )
                            (
                                A_2024_07_22_0011@{ i }
                                    A
                                    u_
                                    y_
                                    u_
                                    ( A_2024_07_22_0010@{ i } A u_ )
                                    r__
                            )
                    )
            with
                A_2024_07_22_0010 _ t => _
            end
        )
    .
    exact ( A_2024_07_22_0010@{ i } ( A_2024_07_22_0009@{ i } A t t ) ( A_2024_07_22_0010@{ i } A t ) ) .
Defined .

(** 恒等道と [p] を結合した道は [p] に等しくなります。 *)

Definition A_2024_07_25_0000@{ i | } ( A : Type@{ i } ) ( x : A ) ( y : A ) ( p : A_2024_07_22_0009@{ i } A x y )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } A x y )
            ( A_2024_07_22_0011@{ i } A x y x ( A_2024_07_22_0010@{ i } A x ) p )
            p
    :=
        match
            p
        as
            p_
        in
            A_2024_07_22_0009 _ x_ y_
        return
            A_2024_07_22_0009@{ i }
                ( A_2024_07_22_0009@{ i } A x_ y_ )
                ( A_2024_07_22_0011@{ i } A x_ y_ x_ ( A_2024_07_22_0010@{ i } A x_ ) p_ )
                p_
        with
            A_2024_07_22_0010 _ z => A_2024_07_22_0010@{ i } ( A_2024_07_22_0009@{ i } A z z ) ( A_2024_07_22_0010@{ i } A z )
        end
.

(** [p] と恒等道を結合した道は [p] に等しくなります。 *)

Definition A_2024_07_25_0001@{ i | } ( A : Type@{ i } ) ( x : A ) ( y : A ) ( p : A_2024_07_22_0009@{ i } A x y )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } A x y )
            ( A_2024_07_22_0011@{ i } A x y y p ( A_2024_07_22_0010@{ i } A y ) )
            p
    :=
        match
            p
        as
            p_
        in
            A_2024_07_22_0009 _ x_ y_
        return
            A_2024_07_22_0009@{ i }
                ( A_2024_07_22_0009@{ i } A x_ y_ )
                ( A_2024_07_22_0011@{ i } A x_ y_ y_ p_ ( A_2024_07_22_0010@{ i } A y_ ) )
                p_
        with
            A_2024_07_22_0010 _ z => A_2024_07_22_0010@{ i } ( A_2024_07_22_0009@{ i } A z z ) ( A_2024_07_22_0010@{ i } A z )
        end
.

(** [p] と [p] を反転した道を結合した道は恒等道に等しくなります。 *)

Definition A_2024_07_25_0002@{ i | } ( A : Type@{ i } ) ( x : A ) ( y : A ) ( p : A_2024_07_22_0009@{ i } A x y )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } A x x )
            ( A_2024_07_22_0011@{ i } A x x y p ( A_2024_07_22_0012@{ i } A y x p ) )
            ( A_2024_07_22_0010@{ i } A x )
    :=
        match
            p
        as
            p_
        in
            A_2024_07_22_0009 _ x_ y_
        return
            A_2024_07_22_0009@{ i }
                ( A_2024_07_22_0009@{ i } A x_ x_ )
                ( A_2024_07_22_0011@{ i } A x_ x_ y_ p_ ( A_2024_07_22_0012@{ i } A y_ x_ p_ ) )
                ( A_2024_07_22_0010@{ i } A x_ )
        with
            A_2024_07_22_0010 _ z => A_2024_07_22_0010@{ i } ( A_2024_07_22_0009@{ i } A z z ) ( A_2024_07_22_0010 A z )
        end
.

(** [p] を反転した道 と [p] を結合した道は恒等道に等しくなります。 *)

Definition A_2024_07_25_0003@{ i | } ( A : Type@{ i } ) ( x : A ) ( y : A ) ( p : A_2024_07_22_0009@{ i } A y x )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } A x x )
            ( A_2024_07_22_0011@{ i } A x x y ( A_2024_07_22_0012@{ i } A x y p ) p )
            ( A_2024_07_22_0010@{ i } A x )
    :=
        match
            p
        as
            p_
        in
            A_2024_07_22_0009 _ y_ x_
        return
            A_2024_07_22_0009@{ i }
                ( A_2024_07_22_0009@{ i } A x_ x_ )
                ( A_2024_07_22_0011@{ i } A x_ x_ y_ ( A_2024_07_22_0012@{ i } A x_ y_ p_ ) p_ )
                ( A_2024_07_22_0010@{ i } A x_ )
        with
            A_2024_07_22_0010 _ z => A_2024_07_22_0010@{ i } ( A_2024_07_22_0009@{ i } A z z ) ( A_2024_07_22_0010@{ i } A z )
        end
.

(** 恒等道を反転した道は恒等道に等しくなります。 *)

Definition A_2024_07_22_0028@{ i | } ( A : Type@{ i } ) ( x : A )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } A x x )
            ( A_2024_07_22_0012@{ i } A x x ( A_2024_07_22_0010@{ i } A x ) )
            ( A_2024_07_22_0010@{ i } A x )
    := A_2024_07_22_0010@{ i } ( A_2024_07_22_0009@{ i } A x x ) ( A_2024_07_22_0010@{ i } A x )
.

(** [p] と [q] を結合した道を反転した道は [q] を反転した道と [p] を反転した道に等しくなります。 *)

Definition A_2024_07_26_0001@{ i | }
        ( A : Type@{ i } )
        ( x : A )
        ( y : A )
        ( z : A )
        ( p : A_2024_07_22_0009@{ i } A z x )
        ( q : A_2024_07_22_0009@{ i } A y z )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } A x y )
            ( A_2024_07_22_0012@{ i } A x y ( A_2024_07_22_0011@{ i } A y x z q p ) )
            ( A_2024_07_22_0011@{ i } A x y z ( A_2024_07_22_0012@{ i } A x z p ) ( A_2024_07_22_0012@{ i } A z y q ) )
.
Proof .
    refine
        (
            let
                a
                    :
                        forall q_ : A_2024_07_22_0009@{ i } A y z ,
                        A_2024_07_22_0009@{ i }
                            ( A_2024_07_22_0009@{ i } A x y )
                            ( A_2024_07_22_0012@{ i } A x y ( A_2024_07_22_0011@{ i } A y x z q_ p ) )
                            (
                                A_2024_07_22_0011@{ i }
                                    A
                                    x
                                    y
                                    z
                                    ( A_2024_07_22_0012@{ i } A x z p )
                                    ( A_2024_07_22_0012@{ i } A z y q_ )
                            )
                    := _
            in
                a q
        )
    .
    refine
        (
            match
                p
            as
                p_
            in
                A_2024_07_22_0009 _ z_ x_
            return
                forall q_ : A_2024_07_22_0009@{ i } A y z_ ,
                A_2024_07_22_0009@{ i }
                    ( A_2024_07_22_0009@{ i } A x_ y )
                    ( A_2024_07_22_0012@{ i } A x_ y ( A_2024_07_22_0011@{ i } A y x_ z_ q_ p_ ) )
                    ( A_2024_07_22_0011@{ i } A x_ y z_ ( A_2024_07_22_0012@{ i } A x_ z_ p_ ) ( A_2024_07_22_0012@{ i } A z_ y q_ ) )
            with
                A_2024_07_22_0010 _ w => _
            end
        )
    .
    refine
        (
            let
                a ( q_ : A_2024_07_22_0009@{ i } A y w )
                    :
                        A_2024_07_22_0009@{ i }
                            ( A_2024_07_22_0009@{ i } A w y )
                            (
                                A_2024_07_22_0012@{ i } A w y ( A_2024_07_22_0011@{ i } A y w w q_ ( A_2024_07_22_0010@{ i } A w ) )
                            )
                            (
                                A_2024_07_22_0011@{ i }
                                    A
                                    w
                                    y
                                    w
                                    ( A_2024_07_22_0012@{ i } A w w ( A_2024_07_22_0010@{ i } A w ) )
                                    ( A_2024_07_22_0012@{ i } A w y q_ )
                            )
                    := _
            in
                a
        )
    .
    refine
        (
            match
                q_
            as
                q__
            in
                A_2024_07_22_0009 _ y_ w_
            return
                A_2024_07_22_0009@{ i }
                    ( A_2024_07_22_0009@{ i } A w_ y_ )
                    (
                        A_2024_07_22_0012@{ i } A w_ y_ ( A_2024_07_22_0011@{ i } A y_ w_ w_ q__ ( A_2024_07_22_0010@{ i } A w_ ) )
                    )
                    (
                        A_2024_07_22_0011@{ i }
                            A
                            w_
                            y_
                            w_
                            ( A_2024_07_22_0012@{ i } A w_ w_ ( A_2024_07_22_0010@{ i } A w_ ) )
                            ( A_2024_07_22_0012@{ i } A w_ y_ q__ )
                    )
            with
                A_2024_07_22_0010 _ v => _
            end
        )
    .
    exact ( A_2024_07_22_0010@{ i } ( A_2024_07_22_0009@{ i } A v v ) ( A_2024_07_22_0010@{ i } A v ) ) .
Defined .

(** [p] を反転した道を反転した道は [p] に等しくなります。 *)

Definition A_2024_07_26_0002@{ i | } ( A : Type@{ i } ) ( x : A ) ( y : A ) ( p : A_2024_07_22_0009@{ i } A x y )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } A x y )
            ( A_2024_07_22_0012@{ i } A x y ( A_2024_07_22_0012@{ i } A y x p ) )
            p
    :=
        match
            p
        as
            p_
        in
            A_2024_07_22_0009 _ x_ y_
        return
            A_2024_07_22_0009@{ i }
                ( A_2024_07_22_0009@{ i } A x_ y_ )
                ( A_2024_07_22_0012@{ i } A x_ y_ ( A_2024_07_22_0012@{ i } A y_ x_ p_ ) )
                p_
        with
            A_2024_07_22_0010 _ z => A_2024_07_22_0010@{ i } ( A_2024_07_22_0009@{ i } A z z ) ( A_2024_07_22_0010@{ i } A z )
        end
.

(** 恒等関数を [p] に適用した道は [p] に等しくなります。 *)

Definition A_2024_07_25_0004@{ i | } ( A : Type@{ i } ) ( x : A ) ( y : A ) ( p : A_2024_07_22_0009@{ i } A x y )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } A x y )
            ( A_2024_07_22_0013@{ i } A A ( 恒等関数@{ i } A ) x y p )
            p
    :=
        match
            p
        as
            p_
        in
            A_2024_07_22_0009 _ x_ y_
        return
            A_2024_07_22_0009@{ i }
                ( A_2024_07_22_0009@{ i } A x_ y_ )
                ( A_2024_07_22_0013@{ i } A A ( 恒等関数@{ i } A ) x_ y_ p_ )
                p_
        with
            A_2024_07_22_0010 _ z => A_2024_07_22_0010@{ i } ( A_2024_07_22_0009@{ i } A z z ) ( A_2024_07_22_0010@{ i } A z )
        end
.

(** [f] と [g] を合成した関数を [p] へ適用した道は [p] へ [g] を適用した道へ [f] を適用した道に等しくなります。 *)

Definition A_2024_07_25_0005@{ i | }
        ( A : Type@{ i } )
        ( B : Type@{ i } )
        ( C : Type@{ i } )
        ( f : B -> A )
        ( g : C -> B )
        ( x : C )
        ( y : C )
        ( p : A_2024_07_22_0009@{ i } C x y )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } A ( f ( g x ) ) ( f ( g y ) ) )
            ( A_2024_07_22_0013@{ i } A C ( 合成する@{ i } A B C f g ) x y p )
            ( A_2024_07_22_0013@{ i } A B f ( g x ) ( g y ) ( A_2024_07_22_0013@{ i } B C g x y p ) )
    :=
        match
            p
        as
            p_
        in
            A_2024_07_22_0009 _ x_ y_
        return
            A_2024_07_22_0009@{ i }
                ( A_2024_07_22_0009@{ i } A ( f ( g x_ ) ) ( f ( g y_ ) ) )
                ( A_2024_07_22_0013@{ i } A C ( 合成する@{ i } A B C f g ) x_ y_ p_ )
                ( A_2024_07_22_0013@{ i } A B f ( g x_ ) ( g y_ ) ( A_2024_07_22_0013@{ i } B C g x_ y_ p_ ) )
        with
            A_2024_07_22_0010 _ z
                =>
                    A_2024_07_22_0010@{ i }
                        ( A_2024_07_22_0009@{ i } A ( f ( g z ) ) ( f ( g z ) ) )
                        ( A_2024_07_22_0010@{ i } A ( f ( g z ) ) )
        end
.

(** 恒等道へ関数を適用した道は恒等道に等しくなります。 *)

Definition A_2024_07_22_0029@{ i | } ( A : Type@{ i } ) ( B : Type@{ i } ) ( f : B -> A ) ( x : B )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } A ( f x ) ( f x ) )
            ( A_2024_07_22_0013@{ i } A B f x x ( A_2024_07_22_0010@{ i } B x ) )
            ( A_2024_07_22_0010@{ i } A ( f x ) )
    := A_2024_07_22_0010@{ i } ( A_2024_07_22_0009@{ i } A ( f x ) ( f x ) ) ( A_2024_07_22_0010@{ i } A ( f x ) )
.

(** [p] と [q] を結合した道に [f] を適用した道は [p] に [f] を適用した道と [q] に [f] を適用した道を結合した道に等しくなります。 *)

Definition A_2024_07_25_0006@{ i | }
        ( A : Type@{ i } )
        ( B : Type@{ i } )
        ( f : B -> A )
        ( x : B )
        ( y : B )
        ( z : B )
        ( p : A_2024_07_22_0009@{ i } B x z )
        ( q : A_2024_07_22_0009@{ i } B z y )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } A ( f x ) ( f y ) )
            ( A_2024_07_22_0013@{ i } A B f x y ( A_2024_07_22_0011@{ i } B x y z p q ) )
            (
                A_2024_07_22_0011@{ i }
                    A
                    ( f x )
                    ( f y )
                    ( f z )
                    ( A_2024_07_22_0013@{ i } A B f x z p )
                    ( A_2024_07_22_0013@{ i } A B f z y q )
            )
.
Proof .
    refine
        (
            let
                a
                    :
                        forall q_ : A_2024_07_22_0009@{ i } B z y ,
                        A_2024_07_22_0009@{ i }
                            ( A_2024_07_22_0009@{ i } A ( f x ) ( f y ) )
                            (
                                A_2024_07_22_0013@{ i } A B f x y ( A_2024_07_22_0011@{ i } B x y z p q_ )
                            )
                            (
                                A_2024_07_22_0011@{ i }
                                    A
                                    ( f x )
                                    ( f y )
                                    ( f z )
                                    ( A_2024_07_22_0013@{ i } A B f x z p )
                                    ( A_2024_07_22_0013@{ i } A B f z y q_ )
                            )
                    := _
            in
                a q
        )
    .
    refine
        (
            match
                p
            as
                p_
            in
                A_2024_07_22_0009 _ x_ z_
            return
                forall q_ : A_2024_07_22_0009@{ i } B z_ y ,
                A_2024_07_22_0009@{ i }
                    ( A_2024_07_22_0009@{ i } A ( f x_ ) ( f y ) )
                    (
                        A_2024_07_22_0013@{ i } A B f x_ y ( A_2024_07_22_0011@{ i } B x_ y z_ p_ q_ )
                    )
                    (
                        A_2024_07_22_0011@{ i }
                            A
                            ( f x_ )
                            ( f y )
                            ( f z_ )
                            ( A_2024_07_22_0013@{ i } A B f x_ z_ p_ )
                            ( A_2024_07_22_0013@{ i } A B f z_ y q_ )
                    )
            with
                A_2024_07_22_0010 _ w => _
            end
        )
    .
    refine
        (
            let
                a ( q_ : A_2024_07_22_0009@{ i } B w y )
                    :
                        A_2024_07_22_0009@{ i }
                            ( A_2024_07_22_0009@{ i } A ( f w ) ( f y ) )
                            (
                                A_2024_07_22_0013@{ i }
                                    A
                                    B
                                    f
                                    w
                                    y
                                    ( A_2024_07_22_0011@{ i } B w y w ( A_2024_07_22_0010@{ i } B w ) q_ )
                            )
                            (
                                A_2024_07_22_0011@{ i }
                                    A
                                    ( f w )
                                    ( f y )
                                    ( f w )
                                    ( A_2024_07_22_0013@{ i } A B f w w ( A_2024_07_22_0010@{ i } B w ) )
                                    ( A_2024_07_22_0013@{ i } A B f w y q_ )
                            )
                    := _
            in
                a
        )
    .
    refine
        (
            match
                q_
            as
                q__
            in
                A_2024_07_22_0009 _ w_ y_
            return
                A_2024_07_22_0009@{ i }
                    ( A_2024_07_22_0009@{ i } A ( f w_ ) ( f y_ ) )
                    ( A_2024_07_22_0013@{ i } A B f w_ y_ ( A_2024_07_22_0011@{ i } B w_ y_ w_ ( A_2024_07_22_0010@{ i } B w_ ) q__ ) )
                    (
                        A_2024_07_22_0011@{ i }
                            A
                            ( f w_ )
                            ( f y_ )
                            ( f w_ )
                            ( A_2024_07_22_0013@{ i } A B f w_ w_ ( A_2024_07_22_0010@{ i } B w_ ) )
                            ( A_2024_07_22_0013@{ i } A B f w_ y_ q__ )
                    )
            with
                A_2024_07_22_0010 _ v => _
            end
        )
    .
    exact ( A_2024_07_22_0010@{ i } ( A_2024_07_22_0009@{ i } A ( f v ) ( f v ) ) ( A_2024_07_22_0010@{ i } A ( f v ) ) ) .
Defined .

(** [p] を反転した道に [f] を適用した道は [p] に [f] を適用した道を反転した道に等しくなります。 *)

Definition A_2024_07_26_0000@{ i | }
        ( A : Type@{ i } )
        ( B : Type@{ i } )
        ( f : B -> A )
        ( x : B )
        ( y : B )
        ( p : A_2024_07_22_0009@{ i } B y x )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } A ( f x ) ( f y ) )
            ( A_2024_07_22_0013@{ i } A B f x y ( A_2024_07_22_0012@{ i } B x y p ) )
            ( A_2024_07_22_0012@{ i } A ( f x ) ( f y ) ( A_2024_07_22_0013@{ i } A B f y x p ) )
    :=
        match
            p
        as
            p_
        in
            A_2024_07_22_0009 _ y_ x_
        return
            A_2024_07_22_0009@{ i }
                ( A_2024_07_22_0009@{ i } A ( f x_ ) ( f y_ ) )
                ( A_2024_07_22_0013@{ i } A B f x_ y_ ( A_2024_07_22_0012@{ i } B x_ y_ p_ ) )
                ( A_2024_07_22_0012@{ i } A ( f x_ ) ( f y_ ) ( A_2024_07_22_0013@{ i } A B f y_ x_ p_ ) )
        with
            A_2024_07_22_0010 _ z
                => A_2024_07_22_0010@{ i } ( A_2024_07_22_0009@{ i } A ( f z ) ( f z ) ) ( A_2024_07_22_0010@{ i } A ( f z ) )
        end
.

(** 恒等道に沿って [u] を輸送した値は [u] に等しくなります。 *)

Definition A_2024_07_22_0030@{ i | } ( A : Type@{ i } ) ( B : A -> Type@{ i } ) ( x : A ) ( u : B x )
    :
        A_2024_07_22_0009@{ i }
            ( B x )
            ( A_2024_07_22_0014@{ i } A B x x ( A_2024_07_22_0010@{ i } A x ) u )
            u
    := A_2024_07_22_0010@{ i } ( B x ) u
.

(** [p] と [q] を結合した道に沿って [u] を輸送した値は [u] を [p] に沿って輸送した値を [q] に沿って輸送した値に等しくなります。 *)

Definition A_2024_07_26_0003@{ i | }
        ( A : Type@{ i } )
        ( B : A -> Type@{ i } )
        ( x : A )
        ( y : A )
        ( z : A )
        ( p : A_2024_07_22_0009@{ i } A y x )
        ( q : A_2024_07_22_0009@{ i } A z y )
        ( u : B z )
    :
        A_2024_07_22_0009@{ i }
            ( B x )
            ( A_2024_07_22_0014@{ i } A B x z ( A_2024_07_22_0011@{ i } A z x y q p ) u )
            ( A_2024_07_22_0014@{ i } A B x y p ( A_2024_07_22_0014@{ i } A B y z q u ) )
.
Proof .
    refine
        (
            let
                a
                    :
                        forall q_ : A_2024_07_22_0009@{ i } A z y ,
                        forall u_ : B z ,
                        A_2024_07_22_0009@{ i }
                            ( B x )
                            ( A_2024_07_22_0014@{ i } A B x z ( A_2024_07_22_0011@{ i } A z x y q_ p ) u_ )
                            ( A_2024_07_22_0014@{ i } A B x y p ( A_2024_07_22_0014@{ i } A B y z q_ u_ ) )
                    := _
            in
                a q u
        )
    .
    refine
        (
            match
                p
            as
                p_
            in
                A_2024_07_22_0009 _ y_ x_
            return
                forall q_ : A_2024_07_22_0009@{ i } A z y_ ,
                forall u_ : B z ,
                A_2024_07_22_0009@{ i }
                    ( B x_ )
                    ( A_2024_07_22_0014@{ i } A B x_ z ( A_2024_07_22_0011@{ i } A z x_ y_ q_ p_ ) u_ )
                    ( A_2024_07_22_0014@{ i } A B x_ y_ p_ ( A_2024_07_22_0014@{ i } A B y_ z q_ u_ ) )
            with
                A_2024_07_22_0010 _ w => _
            end
        )
    .
    refine
        (
            let
                a ( q_ : A_2024_07_22_0009@{ i } A z w )
                    :
                        forall u_ : B z ,
                        A_2024_07_22_0009@{ i }
                            ( B w )
                            (
                                A_2024_07_22_0014@{ i }
                                    A
                                    B
                                    w
                                    z
                                    ( A_2024_07_22_0011@{ i } A z w w q_ ( A_2024_07_22_0010@{ i } A w ) )
                                    u_
                            )
                            (
                                A_2024_07_22_0014@{ i }
                                    A
                                    B
                                    w
                                    w
                                    ( A_2024_07_22_0010@{ i } A w )
                                    ( A_2024_07_22_0014@{ i } A B w z q_ u_ )
                            )
                    := _
            in
                a
        )
    .
    refine
        (
            match
                q_
            as
                q__
            in
                A_2024_07_22_0009 _ z_ w_
            return
                forall u_ : B z_ ,
                A_2024_07_22_0009@{ i }
                    ( B w_ )
                    (
                        A_2024_07_22_0014@{ i }
                            A
                            B
                            w_
                            z_
                            ( A_2024_07_22_0011@{ i } A z_ w_ w_ q__ ( A_2024_07_22_0010@{ i } A w_ ) )
                            u_
                    )
                    ( A_2024_07_22_0014@{ i } A B w_ w_ ( A_2024_07_22_0010@{ i } A w_ ) ( A_2024_07_22_0014@{ i } A B w_ z_ q__ u_ ) )
            with
                A_2024_07_22_0010 _ v => _
            end
        )
    .
    refine
        (
            let
                a ( u_ : B v )
                    :
                        A_2024_07_22_0009@{ i }
                            ( B v )
                            (
                                A_2024_07_22_0014@{ i }
                                    A
                                    B
                                    v
                                    v
                                    ( A_2024_07_22_0011@{ i } A v v v ( A_2024_07_22_0010@{ i } A v ) ( A_2024_07_22_0010@{ i } A v ) )
                                    u_
                            )
                            (
                                A_2024_07_22_0014@{ i }
                                    A
                                    B
                                    v
                                    v
                                    ( A_2024_07_22_0010@{ i } A v )
                                    (
                                        A_2024_07_22_0014@{ i }
                                            A
                                            B
                                            v
                                            v
                                            ( A_2024_07_22_0010@{ i } A v )
                                            u_
                                    )
                            )
                    := _
            in
                a
        )
    .
    exact ( A_2024_07_22_0010@{ i } ( B v ) u_ ) .
Defined .

(** 恒等道へ依存関数を適用した道は恒等道に等しくまります。 *)

Definition A_2024_07_22_0031@{ i | } ( A : Type@{ i } ) ( B : A -> Type@{ i } ) ( f : forall x : A , B x ) ( x : A )
    :
        A_2024_07_22_0009@{ i }
            ( A_2024_07_22_0009@{ i } ( B x ) ( f x ) ( f x ) )
            ( A_2024_07_22_0015@{ i } A B f x x ( A_2024_07_22_0010@{ i } A x ) )
            ( A_2024_07_22_0010@{ i } ( B x ) ( f x ) )
    := A_2024_07_22_0010@{ i } ( A_2024_07_22_0009@{ i } ( B x ) ( f x ) ( f x ) ) ( A_2024_07_22_0010@{ i } ( B x ) ( f x ) )
.

(** 一方の端点を自由にした道を定義します。「片端自由道」と呼びます。 *)

Inductive A_2024_07_26_0004@{ i | } ( A : Type@{ i } ) ( x : A ) : Type@{ i }
    := A_2024_07_26_0005 : forall y : A , A_2024_07_22_0009@{ i } A x y -> A_2024_07_26_0004 A x
.

(** 片端自由道を取り、その端点を得ます。 *)

Definition A_2024_07_26_0006@{ i | } ( A : Type@{ i } ) ( x : A ) ( p : A_2024_07_26_0004@{ i } A x ) : A
    := match p with A_2024_07_26_0005 _ _ y p_中身 => y end
.

(** 片端自由道を取り、そこから普通の道を得ます。 *)

Definition A_2024_07_26_0007@{ i | } ( A : Type@{ i } ) ( x : A ) ( p : A_2024_07_26_0004@{ i } A x )
    : A_2024_07_22_0009@{ i } A x ( A_2024_07_26_0006@{ i } A x p )
    := match p with A_2024_07_26_0005 _ _ y p_中身 => p_中身 end
.

(** 片端自由道の恒等道です。 *)

Definition A_2024_07_26_0008@{ i | } ( A : Type@{ i } ) ( x : A ) : A_2024_07_26_0004@{ i } A x
    := A_2024_07_26_0005@{ i } A x x ( A_2024_07_22_0010@{ i } A x )
.

(** 片端自由道は常に恒等道と等しくなります。 *)

Definition A_2024_07_26_0009@{ i | } ( A : Type@{ i } ) ( x : A ) ( p : A_2024_07_26_0004@{ i } A x )
    : A_2024_07_22_0009@{ i } ( A_2024_07_26_0004@{ i } A x ) ( A_2024_07_26_0008@{ i } A x ) p
.
Proof .
    refine
        (
            match
                p
            as
                p_
            return
                A_2024_07_22_0009@{ i } ( A_2024_07_26_0004@{ i } A x ) ( A_2024_07_26_0008@{ i } A x ) p_
            with
                A_2024_07_26_0005 _ _ y p_中身 => _
            end
        )
    .
    refine
        (
            match
                p_中身
            as
                p_中身_
            in
                A_2024_07_22_0009 _ x_ y_
            return
                A_2024_07_22_0009@{ i }
                    ( A_2024_07_26_0004@{ i } A x_ )
                    ( A_2024_07_26_0008@{ i } A x_ )
                    ( A_2024_07_26_0005@{ i } A x_ y_ p_中身_ )
            with
                A_2024_07_22_0010 _ z => _
            end
        )
    .
    exact ( A_2024_07_22_0010@{ i } ( A_2024_07_26_0004@{ i } A z ) ( A_2024_07_26_0008@{ i } A z ) ) .
Defined .

(** ゼロとゼロを足した数はゼロに等しくなります。 *)

Definition A_2024_07_28_0000@{ i | }
    :
        A_2024_07_22_0009@{ i }
            自然数@{ i }
            ( 足す@{ i } A_2024_07_21_0032@{ i } A_2024_07_21_0032@{ i } )
            A_2024_07_21_0032@{ i }
    := A_2024_07_22_0010@{ i } 自然数@{ i } A_2024_07_21_0032@{ i }
.

(** ゼロと [x] の後者を足した数は [x] の後者に等しくなります。 *)

Definition A_2024_07_28_0001@{ i | } ( x : 自然数@{ i } )
    :
        A_2024_07_22_0009@{ i }
            自然数@{ i }
            ( 足す@{ i } A_2024_07_21_0032@{ i } ( A_2024_07_21_0033@{ i } x ) )
            ( A_2024_07_21_0033@{ i } x )
    := A_2024_07_22_0010@{ i } 自然数@{ i } ( A_2024_07_21_0033@{ i } x )
.

(** [x] の後者とゼロを足した数は [x] の後者に等しくなります。 *)

Definition A_2024_07_28_0002@{ i | } ( x : 自然数 )
    :
        A_2024_07_22_0009@{ i }
            自然数@{ i }
            ( 足す@{ i } ( A_2024_07_21_0033@{ i } x ) A_2024_07_21_0032@{ i } )
            ( A_2024_07_21_0033@{ i } x )
    := A_2024_07_22_0010@{ i } 自然数@{ i } ( A_2024_07_21_0033@{ i } x )
.

(** [x] の後者と [y] の後者を足した数は [x] と [y] を足した数の後者の後者に等しくなります。 *)

Definition A_2024_07_28_0003@{ i | } ( x : 自然数@{ i } ) ( y : 自然数@{ i } )
    :
        A_2024_07_22_0009@{ i }
            自然数@{ i }
            ( 足す@{ i } ( A_2024_07_21_0033@{ i } x ) ( A_2024_07_21_0033@{ i } y ) )
            ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } ( 足す@{ i } x y ) ) )
    :=
        A_2024_07_22_0010@{ i }
            自然数@{ i }
            ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } ( 足す@{ i } x y ) ) )
.

(** ゼロと [x] を足した数は [x] に等しくなります。 *)

Definition A_2024_07_28_0004@{ i | } ( x : 自然数@{ i } )
        :
            A_2024_07_22_0009@{ i }
                自然数@{ i }
                ( 足す@{ i } A_2024_07_21_0032@{ i } x )
                x
    :=
        match
            x
        as
            x_
        return
            A_2024_07_22_0009@{ i }
                自然数@{ i }
                    ( 足す@{ i } A_2024_07_21_0032@{ i } x_ )
                    x_
        with
            A_2024_07_21_0032 => A_2024_07_22_0010@{ i } 自然数@{ i } A_2024_07_21_0032@{ i }
            |
            A_2024_07_21_0033 x_前 => A_2024_07_22_0010@{ i } 自然数@{ i } ( A_2024_07_21_0033@{ i } x_前 )
        end
.

(** [x] とゼロを足した数は [x] に等しくなります。 *)

Definition A_2024_07_28_0005@{ i | } ( x : 自然数@{ i } )
    :
        A_2024_07_22_0009@{ i }
            自然数@{ i }
            ( 足す@{ i } x A_2024_07_21_0032@{ i } )
            x
    :=
        match
            x
        as
            x_
        return
            A_2024_07_22_0009@{ i }
                自然数@{ i }
                ( 足す@{ i } x_ A_2024_07_21_0032@{ i } )
                x_
        with
            A_2024_07_21_0032 => A_2024_07_22_0010@{ i } 自然数@{ i } A_2024_07_21_0032@{ i }
            |
            A_2024_07_21_0033 x_前 => A_2024_07_22_0010@{ i } 自然数@{ i } ( A_2024_07_21_0033@{ i } x_前 )
        end
.

(** [x] の後者と [y] を足した数は [x] と [y] を足した数の後者に等しくなります。 *)

Definition A_2024_07_28_0006@{ i | } ( x : 自然数@{ i } ) ( y : 自然数@{ i } )
        :
            A_2024_07_22_0009@{ i }
                自然数@{ i }
                ( 足す@{ i } ( A_2024_07_21_0033@{ i } x ) y )
                ( A_2024_07_21_0033@{ i } ( 足す@{ i } x y ) )
.
Proof .
    refine
        (
            let
                fix a ( x : 自然数@{ i } ) ( y : 自然数@{ i } ) { struct y }
                    :
                        A_2024_07_22_0009@{ i }
                            自然数@{ i }
                            ( 足す@{ i } ( A_2024_07_21_0033@{ i } x ) y )
                            ( A_2024_07_21_0033@{ i } ( 足す@{ i } x y ) )
                    := _
            in
                a x y
        )
    .
    refine
        (
            match
                x
            as
                x_
            return
                A_2024_07_22_0009@{ i }
                    自然数@{ i }
                    ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_ ) y )
                    ( A_2024_07_21_0033@{ i } ( 足す@{ i } x_ y ) )
            with
                A_2024_07_21_0032 => _
                |
                A_2024_07_21_0033 x_前 => _
            end
        )
    .
    {
        refine
            (
                match
                    y
                as
                    y_
                return
                    A_2024_07_22_0009@{ i }
                        自然数@{ i }
                        ( 足す@{ i } ( A_2024_07_21_0033@{ i } A_2024_07_21_0032@{ i } ) y_ )
                        ( A_2024_07_21_0033@{ i } ( 足す@{ i } A_2024_07_21_0032@{ i } y_ ) )
                with
                    A_2024_07_21_0032 => _
                    |
                    A_2024_07_21_0033 y_前 => _
                end
            )
        .
        {
            exact ( A_2024_07_22_0010@{ i } 自然数@{ i } ( A_2024_07_21_0033@{ i } A_2024_07_21_0032@{ i } ) ) .
        }
        {
            refine
                (
                    A_2024_07_22_0011@{ i }
                        自然数@{ i }
                        (
                            足す@{ i }
                                ( A_2024_07_21_0033@{ i } A_2024_07_21_0032@{ i } )
                                ( A_2024_07_21_0033@{ i } y_前 )
                        )
                        (
                            A_2024_07_21_0033@{ i }
                                ( 足す@{ i } A_2024_07_21_0032@{ i } ( A_2024_07_21_0033@{ i } y_前 ) )
                        )
                        (
                            A_2024_07_21_0033@{ i }
                                ( A_2024_07_21_0033@{ i } ( 足す@{ i } A_2024_07_21_0032@{ i } y_前 ) )
                        )
                        _
                        _
                )
            .
            {
                exact
                    (
                        A_2024_07_22_0010@{ i }
                            自然数@{ i }
                            (
                                A_2024_07_21_0033@{ i }
                                    ( A_2024_07_21_0033@{ i } ( 足す@{ i } A_2024_07_21_0032@{ i } y_前 ) )
                            )
                    )
                .
            }
            {
                refine
                    (
                        A_2024_07_22_0011@{ i }
                            自然数@{ i }
                            (
                                A_2024_07_21_0033@{ i }
                                    ( A_2024_07_21_0033@{ i } ( 足す@{ i } A_2024_07_21_0032@{ i } y_前 ) )
                            )
                            (
                                A_2024_07_21_0033@{ i }
                                    ( 足す@{ i } A_2024_07_21_0032@{ i } ( A_2024_07_21_0033@{ i } y_前 ) )
                            )
                            ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } y_前 ) )
                            _
                            _
                    )
                .
                {
                    refine
                        (
                            let
                                b
                                    :
                                        A_2024_07_22_0009@{ i }
                                            自然数@{ i }
                                            ( 足す@{ i } A_2024_07_21_0032@{ i } y_前 )
                                            y_前
                                    := A_2024_07_28_0004@{ i } y_前
                            in
                                _
                        )
                    .
                    refine
                        (
                            A_2024_07_22_0013@{ i }
                                自然数@{ i }
                                自然数@{ i }
                                ( fun z : 自然数@{ i } => A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } z ) )
                                ( 足す@{ i } A_2024_07_21_0032@{ i } y_前 )
                                y_前
                                _
                        )
                    .
                    exact b .
                }
                {
                    exact
                        (
                            A_2024_07_22_0010@{ i }
                                自然数@{ i }
                                ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } y_前 ) )
                        )
                    .
                }
            }
        }
    }
    {
        refine
            (
                match
                    y
                as
                    y_
                return
                    A_2024_07_22_0009@{ i }
                        自然数@{ i }
                        ( 足す@{ i } ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } x_前 ) ) y_ )
                        ( A_2024_07_21_0033@{ i } ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_前 ) y_ ) )
                with
                    A_2024_07_21_0032 => _
                    |
                    A_2024_07_21_0033 y_前 => _
                end
            )
        .
        {
            exact ( A_2024_07_22_0010@{ i } 自然数@{ i } ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } x_前 ) ) ) .
        }
        {
            refine
                (
                    A_2024_07_22_0011@{ i }
                        自然数@{ i }
                        (
                            足す@{ i }
                                ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } x_前 ) )
                                ( A_2024_07_21_0033@{ i } y_前 )
                        )
                        (
                            A_2024_07_21_0033@{ i }
                                ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_前 ) ( A_2024_07_21_0033@{ i } y_前 ) )
                        )
                        (
                            A_2024_07_21_0033@{ i }
                                ( A_2024_07_21_0033@{ i } ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_前 ) y_前 ) )
                        )
                        _
                        _
                )
            .
            {
                exact
                    (
                        A_2024_07_22_0010@{ i }
                            自然数@{ i }
                            (
                                A_2024_07_21_0033@{ i }
                                    ( A_2024_07_21_0033@{ i } ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_前 ) y_前 ) )
                            )
                    )
                .
            }
            {
                refine
                    (
                        A_2024_07_22_0011@{ i }
                            自然数@{ i }
                            (
                                A_2024_07_21_0033@{ i }
                                    ( A_2024_07_21_0033@{ i } ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_前 ) y_前 ) )
                            )
                            (
                                A_2024_07_21_0033@{ i }
                                    ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_前 ) ( A_2024_07_21_0033@{ i } y_前 ) )
                            )
                            (
                                A_2024_07_21_0033@{ i }
                                    ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } ( 足す@{ i } x_前 y_前 ) ) )
                            )
                            _
                            _
                    )
                .
                {
                    refine
                        (
                            let
                                b
                                    :
                                        A_2024_07_22_0009@{ i }
                                            自然数@{ i }
                                            ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_前 ) y_前 )
                                            ( A_2024_07_21_0033@{ i } ( 足す@{ i } x_前 y_前 ) )
                                    := a x_前 y_前
                            in
                                _
                        )
                    .
                    refine
                        (
                            A_2024_07_22_0013@{ i }
                                自然数@{ i }
                                自然数@{ i }
                                ( fun z : 自然数@{ i } => A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } z ) )
                                ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_前 ) y_前 )
                                ( A_2024_07_21_0033@{ i } ( 足す@{ i } x_前 y_前 ) )
                                _
                        )
                    .
                    exact b .
                }
                {
                    exact
                        (
                            A_2024_07_22_0010@{ i }
                                自然数@{ i }
                                (
                                    A_2024_07_21_0033@{ i }
                                        (
                                            A_2024_07_21_0033@{ i }
                                                (
                                                    A_2024_07_21_0033@{ i } ( 足す@{ i } x_前 y_前 )
                                                )
                                        )
                                )
                        )
                    .
                }
            }
        }
    }
Defined .

(** [x] と [y] の後者を足した数は [x] と [y] を足した数の後者に等しくなります。 *)

Definition A_2024_08_01_0000@{ i | } ( x : 自然数@{ i } ) ( y : 自然数@{ i } )
        :
            A_2024_07_22_0009@{ i }
                自然数@{ i }
                ( 足す@{ i } x ( A_2024_07_21_0033@{ i } y ) )
                ( A_2024_07_21_0033@{ i } ( 足す@{ i } x y ) )
.
Proof .
    refine
        (
            let
                fix a ( x : 自然数@{ i } ) ( y : 自然数@{ i } ) { struct y }
                    :
                        A_2024_07_22_0009@{ i }
                            自然数@{ i }
                            ( 足す@{ i } x ( A_2024_07_21_0033@{ i } y ) )
                            ( A_2024_07_21_0033@{ i } ( 足す@{ i } x y ) )
                    := _
            in
                a x y
        )
    .
    refine
        (
            match
                x
            as
                x_
            return
                A_2024_07_22_0009@{ i }
                    自然数@{ i }
                    ( 足す@{ i } x_ ( A_2024_07_21_0033@{ i } y ) )
                    ( A_2024_07_21_0033@{ i } ( 足す@{ i } x_ y ) )
            with
                A_2024_07_21_0032 => _
                |
                A_2024_07_21_0033 x_前 => _
            end
        )
    .
    {
        refine
            (
                match
                    y
                as
                    y_
                return
                    A_2024_07_22_0009@{ i }
                        自然数@{ i }
                        ( 足す@{ i } A_2024_07_21_0032@{ i } ( A_2024_07_21_0033@{ i } y_ ) )
                        ( A_2024_07_21_0033@{ i } ( 足す@{ i } A_2024_07_21_0032@{ i } y_ ) )
                with
                    A_2024_07_21_0032 => _
                    |
                    A_2024_07_21_0033 y_前 => _
                end
            )
        .
        {
            exact ( A_2024_07_22_0010@{ i } 自然数@{ i } ( A_2024_07_21_0033@{ i } A_2024_07_21_0032@{ i } ) ) .
        }
        {
            exact ( A_2024_07_22_0010@{ i } 自然数@{ i } ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } y_前 ) ) ) .
        }
    }
    {
        refine
            (
                match
                    y
                as
                    y_
                return
                    A_2024_07_22_0009@{ i }
                        自然数@{ i }
                        ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_前 ) ( A_2024_07_21_0033@{ i } y_ ) )
                        ( A_2024_07_21_0033@{ i } ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_前 ) y_ ) )
                with
                    A_2024_07_21_0032 => _
                    |
                    A_2024_07_21_0033 y_前 => _
                end
            )
        .
        {
            refine
                (
                    A_2024_07_22_0011@{ i }
                        自然数@{ i }
                        (
                            足す@{ i }
                                ( A_2024_07_21_0033@{ i } x_前 )
                                ( A_2024_07_21_0033@{ i } A_2024_07_21_0032@{ i } )
                        )
                        (
                            A_2024_07_21_0033@{ i }
                                ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_前 ) A_2024_07_21_0032@{ i } )
                        )
                        (
                            A_2024_07_21_0033@{ i }
                                ( A_2024_07_21_0033@{ i } ( 足す@{ i } x_前 A_2024_07_21_0032@{ i } ) )
                        )
                        _
                        _
                )
            .
            {
                exact
                    (
                        A_2024_07_22_0010@{ i }
                            自然数@{ i }
                            (
                                A_2024_07_21_0033@{ i }
                                    ( A_2024_07_21_0033@{ i } ( 足す@{ i } x_前 A_2024_07_21_0032@{ i } ) )
                            )
                    )
                .
            }
            {
                refine
                    (
                        A_2024_07_22_0011@{ i }
                            自然数@{ i }
                            (
                                A_2024_07_21_0033@{ i }
                                    ( A_2024_07_21_0033@{ i } ( 足す@{ i } x_前 A_2024_07_21_0032@{ i } ) )
                            )
                            (
                                A_2024_07_21_0033@{ i }
                                    ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_前 ) A_2024_07_21_0032@{ i } )
                            )
                            ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } x_前 ) )
                            _
                            _
                    )
                .
                {
                    refine
                        (
                            let
                                b
                                    :
                                        A_2024_07_22_0009@{ i }
                                            自然数@{ i }
                                            ( 足す@{ i } x_前 A_2024_07_21_0032@{ i } )
                                            x_前
                                    :=  A_2024_07_28_0005@{ i } x_前
                            in
                                _
                        )
                    .
                    refine
                        (
                            A_2024_07_22_0013@{ i }
                                自然数@{ i }
                                自然数@{ i }
                                ( fun z : 自然数@{ i } => A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } z ) )
                                ( 足す@{ i } x_前 A_2024_07_21_0032@{ i } )
                                x_前
                                _
                        )
                    .
                    exact b .
                }
                {
                    exact
                        (
                            A_2024_07_22_0010@{ i }
                                自然数@{ i }
                                ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } x_前 ) )
                        )
                    .
                }
            }
        }
        {
            refine
                (
                    A_2024_07_22_0011@{ i }
                        自然数@{ i }
                        (
                            足す@{ i }
                                ( A_2024_07_21_0033@{ i } x_前 )
                                ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } y_前 ) )
                        )
                        (
                            A_2024_07_21_0033@{ i }
                                ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_前 ) ( A_2024_07_21_0033@{ i } y_前 ) )
                        )
                        (
                            A_2024_07_21_0033@{ i }
                                ( A_2024_07_21_0033@{ i } ( 足す@{ i } x_前 ( A_2024_07_21_0033@{ i } y_前 ) ) )
                        )
                        _
                        _
                )
            .
            {
                exact
                    (
                        A_2024_07_22_0010@{ i }
                            自然数@{ i }
                            (
                                A_2024_07_21_0033@{ i }
                                    ( A_2024_07_21_0033@{ i } ( 足す@{ i } x_前 ( A_2024_07_21_0033@{ i } y_前 ) ) )
                            )
                    )
                .
            }
            {
                refine
                    (
                        A_2024_07_22_0011@{ i }
                            自然数@{ i }
                            (
                                A_2024_07_21_0033@{ i }
                                    ( A_2024_07_21_0033@{ i } ( 足す@{ i } x_前 ( A_2024_07_21_0033@{ i } y_前 ) ) )
                            )
                            (
                                A_2024_07_21_0033@{ i }
                                    ( 足す@{ i } ( A_2024_07_21_0033@{ i } x_前 ) ( A_2024_07_21_0033@{ i } y_前 ) )
                            )
                            (
                                A_2024_07_21_0033@{ i }
                                    ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } ( 足す@{ i } x_前 y_前 ) ) )
                            )
                            _
                            _
                    )
                .
                {
                    refine
                        (
                            let
                                b
                                    :
                                        A_2024_07_22_0009@{ i }
                                            自然数@{ i }
                                            ( 足す@{ i } x_前 ( A_2024_07_21_0033@{ i } y_前 ) )
                                            ( A_2024_07_21_0033@{ i } ( 足す@{ i } x_前 y_前 ) )
                                    := a x_前 y_前
                            in
                                _
                        )
                    .
                    refine
                        (
                            A_2024_07_22_0013@{ i }
                                自然数@{ i }
                                自然数@{ i }
                                ( fun z : 自然数@{ i } => A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } z ) )
                                ( 足す@{ i } x_前 ( A_2024_07_21_0033@{ i } y_前 ) )
                                ( A_2024_07_21_0033@{ i } ( 足す@{ i } x_前 y_前 ) )
                                _
                        )
                    .
                    exact b .
                }
                {
                    exact
                        (
                            A_2024_07_22_0010@{ i }
                                自然数@{ i }
                                (
                                    A_2024_07_21_0033@{ i }
                                        (
                                            A_2024_07_21_0033@{ i }
                                                (
                                                    A_2024_07_21_0033@{ i } ( 足す@{ i } x_前 y_前 )
                                                )
                                        )
                                )
                        )
                    .
                }
            }
        }
    }
Defined .

(** [m] と [n] を足した数と [o] を足した数は [m] と [n] と [o] を足した数を足した数に等しくなります。 *)

Definition A_2024_08_26_0000@{ i | } ( m : 自然数@{ i } ) ( n : 自然数@{ i } ) ( o : 自然数@{ i } )
    :
        A_2024_07_22_0009@{ i }
            自然数@{ i }
            ( 足す@{ i } ( 足す@{ i } m n ) o )
            ( 足す@{ i } m ( 足す@{ i } n o ) )
.
Proof .
    refine
        (
            let
                fix a ( m_ : 自然数@{ i } ) ( n_ : 自然数@{ i } ) ( o_ : 自然数@{ i } ) { struct m_ }
                    :
                        A_2024_07_22_0009@{ i }
                            自然数@{ i }
                            ( 足す@{ i } ( 足す@{ i } m_ n_ ) o_ )
                            ( 足す@{ i } m_ ( 足す@{ i } n_ o_ ) )
                    := _
            in
                a m n o
        )
    .
    refine
        (
            match
                m_
            as
                m__
            return
                A_2024_07_22_0009@{ i }
                    自然数@{ i }
                    ( 足す@{ i } ( 足す@{ i } m__ n_ ) o_ )
                    ( 足す@{ i } m__ ( 足す@{ i } n_ o_ ) )
            with
                A_2024_07_21_0032 => _
                |
                A_2024_07_21_0033 m_前 => _
            end
        )
    .
    {
        refine
            (
                match
                    n_
                as
                    n__
                return
                    A_2024_07_22_0009@{ i }
                        自然数@{ i }
                        ( 足す@{ i } ( 足す@{ i } A_2024_07_21_0032@{ i } n__ ) o_ )
                        ( 足す@{ i } A_2024_07_21_0032@{ i } ( 足す@{ i } n__ o_ ) )
                with
                    A_2024_07_21_0032 => _
                    |
                    A_2024_07_21_0033 n_前 => _
                end
            )
        .
        {
            refine
                (
                    match
                        o_
                    as
                        o__
                    return
                        A_2024_07_22_0009@{ i }
                            自然数@{ i }
                            ( 足す@{ i } ( 足す@{ i } A_2024_07_21_0032@{ i } A_2024_07_21_0032@{ i } ) o__ )
                            ( 足す@{ i } A_2024_07_21_0032@{ i } ( 足す@{ i } A_2024_07_21_0032@{ i } o__ ) )
                    with
                        A_2024_07_21_0032 => _
                        |
                        A_2024_07_21_0033 o_前 => _
                    end
                )
            .
            {
                exact ( A_2024_07_22_0010@{ i } 自然数@{ i } A_2024_07_21_0032@{ i } ) .
            }
            {
                exact ( A_2024_07_22_0010@{ i } 自然数@{ i } ( A_2024_07_21_0033@{ i } o_前 ) ) .
            }
        }
        {
            refine
                (
                    match
                        o_
                    as
                        o__
                    return
                        A_2024_07_22_0009@{ i }
                            自然数@{ i }
                            (
                                足す@{ i }
                                    ( 足す@{ i } A_2024_07_21_0032@{ i } ( A_2024_07_21_0033@{ i } n_前 ) )
                                    o__
                            )
                            (
                                足す@{ i }
                                    A_2024_07_21_0032@{ i }
                                    ( 足す@{ i } ( A_2024_07_21_0033@{ i } n_前 ) o__ )
                            )
                    with
                        A_2024_07_21_0032 => _
                        |
                        A_2024_07_21_0033 o_前 => _
                    end
                )
            .
            {
                exact ( A_2024_07_22_0010@{ i } 自然数@{ i } ( A_2024_07_21_0033@{ i } n_前 ) ) .
            }
            {
                exact
                    (
                        A_2024_07_22_0010@{ i }
                            自然数@{ i }
                            ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } ( 足す@{ i } n_前 o_前 ) ) )
                    )
                .
            }
        }
    }
    {
        refine
            (
                match
                    n_
                as
                    n__
                return
                    A_2024_07_22_0009@{ i }
                        自然数@{ i }
                        ( 足す@{ i } ( 足す@{ i } ( A_2024_07_21_0033@{ i } m_前 ) n__ ) o_ )
                        ( 足す@{ i } ( A_2024_07_21_0033@{ i } m_前 ) ( 足す@{ i } n__ o_ ) )
                with
                    A_2024_07_21_0032 => _
                    |
                    A_2024_07_21_0033 n_前 => _
                end
            )
        .
        {
            refine
                (
                    match
                        o_
                    as
                        o__
                    return
                        A_2024_07_22_0009@{ i }
                            自然数@{ i }
                            (
                                足す@{ i }
                                    ( 足す@{ i } ( A_2024_07_21_0033@{ i } m_前 ) A_2024_07_21_0032@{ i } )
                                    o__
                            )
                            (
                                足す@{ i }
                                    ( A_2024_07_21_0033@{ i } m_前 )
                                    ( 足す@{ i } A_2024_07_21_0032@{ i } o__ )
                            )
                    with
                        A_2024_07_21_0032 => _
                        |
                        A_2024_07_21_0033 o_前 => _
                    end
                )
            .
            {
                exact ( A_2024_07_22_0010@{ i } 自然数@{ i } ( A_2024_07_21_0033@{ i } m_前 ) ) .
            }
            {
                exact
                    (
                        A_2024_07_22_0010@{ i }
                            自然数@{ i }
                            ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } ( 足す@{ i } m_前 o_前 ) ) )
                    )
                .
            }
        }
        {
            refine
                (
                    match
                        o_
                    as
                        o__
                    return
                        A_2024_07_22_0009@{ i }
                            自然数@{ i }
                            (
                                足す@{ i }
                                    ( 足す@{ i } ( A_2024_07_21_0033@{ i } m_前 ) ( A_2024_07_21_0033@{ i } n_前 ) )
                                    o__
                            )
                            (
                                足す@{ i }
                                    ( A_2024_07_21_0033@{ i } m_前 )
                                    ( 足す@{ i } ( A_2024_07_21_0033@{ i } n_前 ) o__ )
                            )
                    with
                        A_2024_07_21_0032 => _
                        |
                        A_2024_07_21_0033 o_前 => _
                    end
                )
            .
            {
                exact
                    (
                        A_2024_07_22_0010@{ i }
                            自然数@{ i }
                            ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } ( 足す@{ i } m_前 n_前 ) ) )
                    )
                .
            }
            {
                refine
                    (
                        A_2024_07_22_0011@{ i }
                            自然数@{ i }
                                (
                                    A_2024_07_21_0033@{ i }
                                        (
                                            A_2024_07_21_0033@{ i }
                                                (
                                                    足す@{ i }
                                                        ( A_2024_07_21_0033@{ i } ( 足す@{ i } m_前 n_前 ) )
                                                        o_前
                                                )
                                        )
                                )
                                (
                                    A_2024_07_21_0033@{ i }
                                        (
                                            A_2024_07_21_0033@{ i }
                                                (
                                                    足す@{ i }
                                                        m_前
                                                        ( A_2024_07_21_0033@{ i } ( 足す@{ i } n_前 o_前 ) )
                                                )
                                        )
                                )
                                (
                                    A_2024_07_21_0033@{ i }
                                        (
                                            A_2024_07_21_0033@{ i }
                                                (
                                                    A_2024_07_21_0033@{ i }
                                                        ( 足す@{ i } ( 足す@{ i } m_前 n_前 ) o_前 )
                                                )
                                        )
                                )
                                _
                                _
                    )
                .
                {
                    refine
                        (
                            let
                                b
                                    :
                                        A_2024_07_22_0009@{ i }
                                            自然数@{ i }
                                            (
                                                足す@{ i }
                                                    ( A_2024_07_21_0033@{ i } ( 足す@{ i } m_前 n_前 ) )
                                                    o_前
                                            )
                                            (
                                                A_2024_07_21_0033@{ i }
                                                    ( 足す@{ i } ( 足す@{ i } m_前 n_前 ) o_前 )
                                            )
                                    := A_2024_07_28_0006@{ i } ( 足す@{ i } m_前 n_前 ) o_前
                            in
                                _
                        )
                    .
                    refine
                        (
                            A_2024_07_22_0013@{ i }
                                自然数@{ i }
                                自然数@{ i }
                                (
                                    fun w : 自然数@{ i } =>
                                    A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } w )
                                )
                                (
                                    足す@{ i }
                                        ( A_2024_07_21_0033@{ i } ( 足す@{ i } m_前 n_前 ) )
                                        o_前
                                )
                                (
                                    A_2024_07_21_0033@{ i }
                                        ( 足す@{ i } ( 足す@{ i } m_前 n_前 ) o_前 )
                                )
                                _
                        )
                    .
                    exact b .
                }
                {
                    refine
                        (
                            A_2024_07_22_0011@{ i }
                                自然数@{ i }
                                (
                                    A_2024_07_21_0033@{ i }
                                        (
                                            A_2024_07_21_0033@{ i }
                                                (
                                                    A_2024_07_21_0033@{ i }
                                                        ( 足す@{ i } ( 足す@{ i } m_前 n_前 ) o_前 )
                                                )
                                        )
                                )
                                (
                                    A_2024_07_21_0033@{ i }
                                        (
                                            A_2024_07_21_0033@{ i }
                                                (
                                                    足す@{ i }
                                                        m_前
                                                        ( A_2024_07_21_0033@{ i } ( 足す@{ i } n_前 o_前 ) )
                                                )
                                        )
                                )
                                (
                                    A_2024_07_21_0033@{ i }
                                        (
                                            A_2024_07_21_0033@{ i }
                                                (
                                                    A_2024_07_21_0033@{ i }
                                                        ( 足す@{ i } m_前 ( 足す@{ i } n_前 o_前 ) )
                                                )
                                        )
                                )
                                _
                                _
                        )
                    .
                    {
                        refine
                            (
                                let
                                    b
                                        :
                                            A_2024_07_22_0009@{ i }
                                                自然数@{ i }
                                                ( 足す@{ i } ( 足す@{ i } m_前 n_前 ) o_前 )
                                                ( 足す@{ i } m_前 ( 足す@{ i } n_前 o_前 ) )
                                        := a m_前 n_前 o_前
                                in
                                    _
                            )
                        .
                        refine
                            (
                                A_2024_07_22_0013@{ i }
                                    自然数@{ i }
                                    自然数@{ i }
                                    (
                                        fun w : 自然数@{ i } =>
                                        A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } w ) )
                                    )
                                    ( 足す@{ i } ( 足す@{ i } m_前 n_前 ) o_前 )
                                    ( 足す@{ i } m_前 ( 足す@{ i } n_前 o_前 ) )
                                    _
                            )
                        .
                        exact b .
                    }
                    {
                        refine
                            (
                                let
                                    b
                                        :
                                            A_2024_07_22_0009@{ i }
                                                自然数@{ i }
                                                (
                                                    足す@{ i }
                                                        m_前
                                                        ( A_2024_07_21_0033@{ i } ( 足す@{ i } n_前 o_前 ) )
                                                )
                                                (
                                                    A_2024_07_21_0033@{ i }
                                                        ( 足す@{ i } m_前 ( 足す@{ i } n_前 o_前 ) )
                                                )
                                        := A_2024_08_01_0000@{ i } m_前 ( 足す@{ i } n_前 o_前 ) 
                                in
                                    _
                            )
                        .
                        refine
                            (
                                A_2024_07_22_0013@{ i }
                                    自然数@{ i }
                                    自然数@{ i }
                                    (
                                        fun w : 自然数@{ i } =>
                                        A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } w )
                                    )
                                    (
                                        A_2024_07_21_0033@{ i }
                                            ( 足す@{ i } m_前 ( 足す@{ i } n_前 o_前 ) )
                                    )
                                    (
                                        足す@{ i }
                                            m_前
                                            ( A_2024_07_21_0033@{ i } ( 足す@{ i } n_前 o_前 ) )
                                    )
                                    _
                            )
                        .
                        refine
                            (
                                A_2024_07_22_0012@{ i }
                                    自然数@{ i }
                                    (
                                        A_2024_07_21_0033@{ i }
                                            ( 足す@{ i } m_前 ( 足す@{ i } n_前 o_前 ) )
                                    )
                                    (
                                        足す@{ i }
                                            m_前
                                            ( A_2024_07_21_0033@{ i } ( 足す@{ i } n_前 o_前 ) )
                                    )
                                    _
                            )
                        .
                        exact b .
                    }
                }
            }
        }
    }
Defined .

(** [m] と [n] を足した数は [n] と [m] を足した数に等しくなります。 *)

Definition A_2024_08_26_0001@{ i | } ( m : 自然数@{ i } ) ( n : 自然数@{ i } )
    :
        A_2024_07_22_0009@{ i } 自然数@{ i } ( 足す@{ i } n m ) ( 足す@{ i } m n )
.
Proof .
    refine
        (
            let
                fix a ( m_ : 自然数@{ i } ) ( n_ : 自然数@{ i } ) { struct m_ }
                    :
                        A_2024_07_22_0009@{ i }
                            自然数@{ i }
                            ( 足す@{ i } n_ m_ )
                            ( 足す@{ i } m_ n_ )
                    := _
            in
                a m n
        )
    .
    refine
        (
            match
                m_
            as
                m__
            return
                A_2024_07_22_0009@{ i }
                    自然数@{ i }
                    ( 足す@{ i } n_ m__ )
                    ( 足す@{ i } m__ n_ )
            with
                A_2024_07_21_0032 => _
                |
                A_2024_07_21_0033 m_前 => _
            end
        )
    .
    {
        refine
            (
                match
                    n_
                as
                    n__
                return
                    A_2024_07_22_0009@{ i }
                        自然数@{ i }
                        ( 足す@{ i } n__ A_2024_07_21_0032@{ i } )
                        ( 足す@{ i } A_2024_07_21_0032@{ i } n__ )
                with
                    A_2024_07_21_0032 => _
                    |
                    A_2024_07_21_0033 n_前 => _
                end
            )
        .
        {
            exact ( A_2024_07_22_0010@{ i } 自然数@{ i } A_2024_07_21_0032@{ i } ) .
        }
        {
            exact ( A_2024_07_22_0010@{ i } 自然数@{ i } ( A_2024_07_21_0033@{ i } n_前 ) ) .
        }
    }
    {
        refine
            (
                match
                    n_
                as
                    n__
                return
                    A_2024_07_22_0009@{ i }
                        自然数@{ i }
                        ( 足す@{ i } n__ ( A_2024_07_21_0033@{ i } m_前 ) )
                        ( 足す@{ i } ( A_2024_07_21_0033@{ i } m_前 ) n__ )
                with
                    A_2024_07_21_0032 => _
                    |
                    A_2024_07_21_0033 n_前 => _
                end
            )
        .
        {
            exact ( A_2024_07_22_0010@{ i } 自然数@{ i } ( A_2024_07_21_0033@{ i } m_前 ) ) .
        }
        {
            refine
                (
                    let
                        b
                            :
                                A_2024_07_22_0009@{ i }
                                    自然数@{ i }
                                    ( 足す@{ i } n_前 m_前 )
                                    ( 足す@{ i } m_前 n_前 )
                            := a m_前 n_前
                    in
                        _
                )
            .
            refine
                (
                    A_2024_07_22_0013@{ i }
                        自然数@{ i }
                        自然数@{ i }
                        ( fun x : 自然数@{ i } => A_2024_07_21_0033@{ i } ( A_2024_07_21_0033@{ i } x ) )
                        ( 足す@{ i } n_前 m_前 )
                        ( 足す@{ i } m_前 n_前 )
                        _
                )
            .
            exact b .
        }
    }
Defined .
