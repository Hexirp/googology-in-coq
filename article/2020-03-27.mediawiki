Coq で巨大数論 (Googology in Coq) は、単純に巨大数論を Coq で形式化しようという試みを行う、不定期連載のブログ記事です。

== 2020-03-27 ==

初回はユニット型を作成します。ユニット型は値が一つだけしかない型です。カリー＝ハワード対応を通して恒真式 ( \( \top \), <code>\top</code> ) に対応します。

<pre class="code">
Inductive Unit@{i} : Type@{i} := unit : Unit.
</pre>

<code>Inductive</code> キーワードを用いてユニット型を定義します。この型の構築子は一つだけであり、それは何も引数を受け取りません。

== 2020-03-28 ==

今日は関数型の表記を追加します。関数型はもともと Coq に組み込まれている全称量化型あるいは依存積型 <code>forall x, T</code> の特殊な場合として表されます。具体的に言うならば、ここでの <code>T</code> が <code>x</code> に依存していない場合が関数型です。

<pre class="code">
Notation "x -> y" := (forall (_ : x), y) (at level 99, right associativity, y at level 200).
</pre>

わざわざ <code>forall</code> を書くのは面倒なので矢印で書けるように記法を設定します。変数を <code>_</code> で使用されないと宣言することで、変数に依存しないことを強制しています。後に続く記述は記法としての優先順位や結合性を設定しています。

== ??? ==

依存和型には、二つの特徴的な使われ方があります。一つ目は二つ目の引数に焦点を当てた使い方です。 Haskell の存在型の使われ方に似ています。この場合は二つ目の引数の型の違いを吸収するためであって、一つ目の引数は重要ではありません。二つ目は一つ目の引数に焦点にあてた使い方です。一つ目の引数に二つ目の引数として与えられた条件を加えるためであり、計算において二つ目の引数は重要ではありません。
