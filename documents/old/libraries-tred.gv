digraph dependency_graph_tred {
  # GiC.Base

  # GiC.Function
  "GiC.Function" -> "GiC.Base";

  # GiC.Path.Base
  "GiC.Path.Base" -> "GiC.Base";

  # GiC.Path.OneDim
  "GiC.Path.OneDim" -> "GiC.Base";

  # GiC.Path.Function
  "GiC.Path.Function" -> "GiC.Function";
  "GiC.Path.Function" -> "GiC.Path.Base";
  "GiC.Path.Function" -> "GiC.Path.OneDim";

  # GiC.Path.TwoDim
  "GiC.Path.TwoDim" -> "GiC.Path.Base";
  "GiC.Path.TwoDim" -> "GiC.Path.OneDim";

  # GiC.Path.Transposition
  "GiC.Path.Transposition" -> "GiC.Path.Base";
  "GiC.Path.Transposition" -> "GiC.Path.OneDim";

  # GiC.Path.Functoriality
  "GiC.Path.Functoriality" -> "GiC.Path.Transposition";

  # GiC.Path.Application_1_0
  "GiC.Path.Application_1_0" -> "GiC.Function";
  "GiC.Path.Application_1_0" -> "GiC.Path.Base";

  # GiC.Path.Application_1_1
  "GiC.Path.Application_1_1" -> "GiC.Path.Base";

  # GiC.Path.Transport
  "GiC.Path.Transport" -> "GiC.Path.Function";
  "GiC.Path.Transport" -> "GiC.Path.Transposition";

  # GiC.Path.Fibration
  "GiC.Path.Fibration" -> "GiC.Path.Function";

  # GiC.Path.Transport_2
  "GiC.Path.Transport_2" -> "GiC.Path.Function";

  # GiC.Path.Application_D
  "GiC.Path.Application_D" -> "GiC.Path.Transport";
  "GiC.Path.Application_D" -> "GiC.Path.Fibration";

  # GiC.Path.Application_0_2
  "GiC.Path.Application_0_2" -> "GiC.Path.TwoDim";
  "GiC.Path.Application_0_2" -> "GiC.Path.Transport_2";
  "GiC.Path.Application_0_2" -> "GiC.Path.Application_D";

  # GiC.Path
  "GiC.Path" -> "GiC.Path.Functoriality";
  "GiC.Path" -> "GiC.Path.Application_1_0";
  "GiC.Path" -> "GiC.Path.Application_1_1";
  "GiC.Path" -> "GiC.Path.Application_0_2";

  # GiC.Type.Base
  "GiC.Type.Base" -> "GiC.Base";

  # GiC.Type.Nat
  "GiC.Type.Nat" -> "GiC.Type.Base";
}
